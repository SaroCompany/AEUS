#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AETA V0.1
Created on Sun Nov  14 21:29:28 2019

@author: Ing. John J. Arroyo O.
"""
import tkinter as tk
from tkinter import ttk
import math
import sympy
import numpy
import matplotlib.pyplot as plt

Colombia = {
    'Amazonas':{
        'Leticia':                  [91001,0.05,0.05,0.04,0.02],
        'El Encanto':               [91263,0.05,0.05,0.04,0.02],
        'La Chorrera':              [91405,0.05,0.05,0.04,0.02],
        'La Pedrera':               [91407,0.05,0.05,0.04,0.02],
        'La Victoria':              [91430,0.05,0.05,0.04,0.02],
        'Mirití-Paraná':            [91460,0.05,0.05,0.04,0.02],
        'Puerto Alegría':           [91530,0.05,0.05,0.04,0.02],
        'Puerto Arica':             [91536,0.05,0.05,0.04,0.02],
        'Puerto Nariño':            [91540,0.05,0.05,0.04,0.02],
        'Puerto Santander':         [91669,0.05,0.05,0.04,0.02],
        'Tarapacá':                 [91798,0.05,0.05,0.04,0.02]
    },
    'Antioquia':{
        'Medellín':                 [5001,0.15,0.20,0.13,0.07],
        'Abejorral':                [5002,0.20,0.25,0.13,0.07],
        'Abriaquí':                 [5004,0.20,0.25,0.13,0.07],
        'Alejandría':               [5021,0.15,0.20,0.09,0.05],
        'Amagá':                    [5030,0.20,0.25,0.16,0.09],
        'Amalfi':                   [5031,0.15,0.20,0.07,0.04],
        'Andes':                    [5034,0.25,0.30,0.17,0.10],
        'Angelópolis':              [5036,0.20,0.25,0.16,0.08],
        'Angostura':                [5038,0.15,0.20,0.09,0.04],
        'Anorí':                    [5040,0.15,0.20,0.07,0.04],
        'Anzá':                     [5044,0.20,0.30,0.14,0.08],
        'Apartadó':                 [5045,0.25,0.25,0.19,0.09],
        'Arboletes':                [5051,0.10,0.20,0.05,0.03],
        'Argelia':                  [5055,0.15,0.20,0.12,0.07],
        'Armenia':                  [5059,0.20,0.25,0.15,0.08],
        'Barbosa':                  [5079,0.15,0.20,0.10,0.05],
        'Bello':                    [5088,0.15,0.20,0.13,0.07],
        'Belmira':                  [5086,0.15,0.20,0.12,0.06],
        'Betania':                  [5091,0.25,0.30,0.16,0.10],
        'Betulia':                  [5093,0.20,0.25,0.14,0.08],
        'Briceño':                  [5107,0.15,0.20,0.12,0.06],
        'Buriticá':                 [5113,0.20,0.25,0.12,0.07],
        'Cáceres':                  [5120,0.15,0.20,0.08,0.03],
        'Caicedo':                  [5125,0.20,0.25,0.13,0.07],
        'Caldas':                   [5129,0.20,0.20,0.16,0.08],
        'Campamento':               [5134,0.15,0.20,0.08,0.04],
        'Cañasgordas':              [5138,0.20,0.25,0.12,0.07],
        'Caracolí':                 [5142,0.15,0.20,0.13,0.06],
        'Caramanta':                [5145,0.25,0.25,0.15,0.09],
        'Carepa':                   [5147,0.25,0.25,0.16,0.08],
        'Carmen de Viboral':        [5148,0.15,0.20,0.11,0.06],
        'Carolina':                 [5150,0.15,0.20,0.09,0.05],
        'Caucásia':                 [5154,0.15,0.20,0.04,0.02],
        'Chigorodó':                [5172,0.25,0.30,0.19,0.10],
        'Ciseneros':                [5190,0.15,0.20,0.09,0.04],
        'Ciudad Bólivar':           [5101,0.25,0.30,0.16,0.10],
        'Cocorná':                  [5197,0.15,0.20,0.11,0.06],
        'Concepción':               [5206,0.15,0.20,0.10,0.05],
        'Concordia':                [5209,0.25,0.25,0.15,0.08],
        'Copacabana':               [5212,0.15,0.20,0.12,0.06],
        'Dabeiba':                  [5234,0.25,0.30,0.13,0.08],
        'Don Matias':               [5237,0.15,0.20,0.10,0.05],
        'Ebéjico':                  [5240,0.15,0.25,0.15,0.08],
        'El Bagre':                 [5250,0.15,0.15,0.07,0.04],
        'Entrerríos':               [5264,0.15,0.20,0.11,0.06],
        'Envigado':                 [5266,0.15,0.20,0.13,0.07],
        'Fredonia':                 [5282,0.20,0.25,0.16,0.09],
        'Frontino':                 [5284,0.30,0.30,0.15,0.09],
        'Giraldo':                  [5306,0.20,0.25,0.12,0.07],
        'Girardota':                [5308,0.15,0.20,0.11,0.06],
        'Gómez Plata':              [5310,0.15,0.20,0.08,0.04],
        'Granada':                  [5313,0.15,0.20,0.10,0.05],
        'Guadalupe':                [5315,0.15,0.20,0.08,0.04],
        'Guarne':                   [5318,0.15,0.20,0.12,0.06],
        'Guatapé':                  [5321,0.15,0.20,0.10,0.05],
        'Heliconia':                [5347,0.15,0.25,0.16,0.08],
        'Hispania':                 [5353,0.25,0.30,0.16,0.10],
        'Itagüi':                   [5360,0.15,0.20,0.14,0.08],
        'Ituango':                  [5361,0.20,0.20,0.09,0.05],
        'Jardín':                   [5364,0.25,0.30,0.20,0.11],
        'Jericó':                   [5368,0.25,0.25,0.18,0.10],
        'La Ceja':                  [5376,0.15,0.20,0.13,0.07],
        'La Estrella':              [5380,0.15,0.25,0.15,0.08],
        'La Pintada':               [5390,0.25,0.25,0.16,0.09],
        'La Unión':                 [5400,0.15,0.20,0.12,0.06],
        'Liborina':                 [5411,0.15,0.20,0.14,0.07],
        'Maceo':                    [5425,0.15,0.20,0.11,0.06],
        'Marinilla':                [5440,0.15,0.20,0.11,0.06],
        'Montebello':               [5467,0.20,0.25,0.14,0.08],
        'Murindó':                  [5475,0.35,0.35,0.25,0.13],
        'Mutatá':                   [5480,0.25,0.30,0.16,0.09],
        'Nariño':                   [5483,0.20,0.20,0.12,0.07],
        'Nechí':                    [5495,0.15,0.15,0.05,0.03],
        'Necoclí':                  [5490,0.20,0.20,0.15,0.07],
        'Olaya':                    [5501,0.15,0.20,0.15,0.07],
        'Peñol':                    [5541,0.15,0.20,0.10,0.05],
        'Peque':                    [5543,0.20,0.25,0.11,0.06],
        'Pueblorrico':              [5576,0.25,0.25,0.17,0.10],
        'Puerto Berrio':            [5579,0.15,0.15,0.11,0.06],
        'Puerto Nare':              [5585,0.15,0.20,0.11,0.06],
        'Puerto Triunfo':           [5591,0.15,0.20,0.09,0.05],
        'Remedios':                 [5604,0.15,0.20,0.15,0.07],
        'Retiro':                   [5607,0.15,0.20,0.13,0.07],
        'Rionegro':                 [5615,0.15,0.20,0.12,0.06],
        'Sabanalarga':              [5628,0.20,0.20,0.13,0.07],
        'Sabaneta':                 [5631,0.15,0.20,0.14,0.08],
        'Salgar':                   [5642,0.25,0.25,0.15,0.09],
        'San Ándres':               [5647,0.15,0.20,0.12,0.06],
        'San Carlos':               [5649,0.15,0.20,0.10,0.06],
        'San Francisco':            [5652,0.15,0.20,0.13,0.07],
        'San Jeronimo':             [5656,0.15,0.20,0.15,0.08],
        'San José de Lamonta':      [5658,0.15,0.20,0.12,0.06],
        'San Juan de Urabá':        [5659,0.10,0.20,0.06,0.03],
        'San Luis':                 [5660,0.15,0.25,0.12,0.06],
        'San Pedro':                [5664,0.15,0.20,0.12,0.06],
        'San Pedro de Urabá':       [5665,0.15,0.20,0.06,0.04],
        'San Rafael':               [5667,0.15,0.20,0.09,0.05],
        'San Roque':                [5670,0.15,0.20,0.08,0.05],
        'San Vicente':              [5674,0.15,0.20,0.11,0.05],
        'Santa Bárbara':            [5679,0.20,0.25,0.16,0.09],
        'Santa Rosa de Osos':       [5686,0.15,0.20,0.10,0.05],
        'Santafé de Antioquia':     [5042,0.20,0.20,0.13,0.07],
        'Santodomingo':             [5690,0.15,0.20,0.09,0.05],
        'Santuario':                [5697,0.15,0.20,0.11,0.06],
        'Segovia':                  [5736,0.15,0.20,0.10,0.05],
        'Sonsón':                   [5756,0.15,0.20,0.12,0.07],
        'Sopetrán':                 [5761,0.15,0.20,0.15,0.08],
        'Támesis':                  [5789,0.25,0.25,0.16,0.09],
        'Tarazá':                   [5790,0.15,0.20,0.08,0.04],
        'Tarso':                    [5792,0.25,0.25,0.16,0.09],
        'Titiribí':                 [5809,0.20,0.20,0.15,0.08],
        'Toledo':                   [5819,0.15,0.20,0.13,0.07],
        'Turbo':                    [5837,0.25,0.25,0.13,0.07],
        'Uramita':                  [5842,0.25,0.25,0.12,0.07],
        'Urrao':                    [5847,0.30,0.30,0.17,0.10],
        'Valdivia':                 [5854,0.15,0.20,0.11,0.05],
        'Valparaíso':               [5856,0.25,0.25,0.15,0.09],
        'Vegachí':                  [5858,0.15,0.20,0.08,0.05],
        'Venecia':                  [5861,0.20,0.25,0.15,0.08],
        'Vigía del Fuerte':         [5873,0.35,0.35,0.22,0.12],
        'Yalí':                     [5885,0.15,0.20,0.09,0.05],
        'Yarumal':                  [5887,0.15,0.20,0.09,0.05],
        'Yolombó':                  [5890,0.15,0.20,0.08,0.04],
        'Yondó':                    [5893,0.15,0.15,0.06,0.04],
        'Zaragoza':                 [5895,0.15,0.20,0.05,0.03]
    },
    'Arauca':{
        'Arauca':                   [81001,0.15,0.15,0.10,0.04],
        'Arauquita':                [81065,0.20,0.15,0.07,0.03],
        'Cravo Norte':              [81220,0.05,0.05,0.03,0.02],
        'Fortul':                   [81300,0.30,0.20,0.32,0.12],
        'Puerto Rondón':            [81591,0.15,0.15,0.14,0.05],
        'Saravena':                 [81736,0.30,0.25,0.21,0.08],
        'Tame':                     [81794,0.25,0.20,0.31,0.10]
    },
    'Atlántico':{
        'Barranquilla':             [8001,0.10,0.10,0.05,0.03],
        'Baranoa':                  [8078,0.10,0.10,0.05,0.03],
        'Campo de la Cruz':         [8137,0.10,0.10,0.08,0.03],
        'Candelaria':               [8141,0.10,0.10,0.08,0.03],
        'Galapa':                   [8296,0.10,0.10,0.05,0.03],
        'Juan de Acosta':           [8372,0.10,0.10,0.04,0.03],
        'Luruaco':                  [8421,0.10,0.10,0.04,0.02],
        'Malambo':                  [8433,0.10,0.10,0.06,0.03],
        'Manatí':                   [8436,0.10,0.10,0.06,0.03],
        'Palmar de varela':         [8520,0.10,0.10,0.08,0.03],
        'Piojo':                    [8549,0.10,0.10,0.04,0.02],
        'Polonuevo':                [8558,0.10,0.10,0.06,0.03],
        'Ponedera':                 [8560,0.10,0.10,0.08,0.03],
        'Puerto Colombia':          [8573,0.10,0.10,0.04,0.03],
        'Repelón':                  [8606,0.10,0.10,0.04,0.02],
        'Sabanagrande':             [8634,0.10,0.10,0.07,0.03],
        'Sabanalarga':              [8638,0.10,0.10,0.05,0.03],
        'Santa Lucia':              [8675,0.10,0.10,0.07,0.03],
        'Santo Tomás':              [8685,0.10,0.10,0.07,0.03],
        'Soledad':                  [8758,0.10,0.10,0.06,0.03],
        'Suán':                     [8770,0.10,0.10,0.08,0.03],
        'Tubará':                   [8832,0.10,0.10,0.04,0.03],
        'Usiacurí':                 [8849,0.10,0.10,0.04,0.03]
    },
    'Bólivar':{
        "Cartagena":                [13001,0.1,0.1,0.05,0.03],
        "Achí":                     [13006,0.15,0.15,0.07,0.04],
        "Altos del Rosario":        [13030,0.15,0.15,0.06,0.03],
        "Arenal":                   [13042,0.15,0.15,0.05,0.04],
        "Arjona":                   [13052,0.1,0.1,0.05,0.03],
        "Arroyohondo":              [13062,0.1,0.1,0.07,0.04],
        "Barranco de Loba":         [13074,0.15,0.15,0.05,0.03],
        "Calamar":                  [13140,0.1,0.1,0.08,0.04],
        "Cantagallo":               [13160,0.15,0.15,0.08,0.04],
        "Cicuco":                   [13188,0.1,0.15,0.04,0.03],
        "Clemencia":                [13222,0.1,0.1,0.05,0.03],
        "Córdoba":                  [13212,0.1,0.1,0.05,0.03],
        "El carmen de Bolivar":     [13244,0.1,0.15,0.08,0.04],
        "El Guamo":                 [13248,0.1,0.1,0.08,0.04],
        "El Peñón":                 [13268,0.15,0.15,0.07,0.04],
        "Hatillo de Loba":          [13300,0.15,0.1,0.05,0.03],
        "Magangue":                 [13430,0.1,0.15,0.04,0.03],
        "Mahates":                  [13433,0.1,0.1,0.08,0.03],
        "Margarita":                [13440,0.1,0.1,0.05,0.03],
        "María la Baja":            [13442,0.1,0.15,0.07,0.03],
        "Mompós":                   [13468,0.1,0.15,0.04,0.03],
        "Montecristo":              [13458,0.15,0.15,0.08,0.04],
        "Morales":                  [13473,0.15,0.15,0.07,0.04],
        "Pinillos":                 [13549,0.1,0.15,0.05,0.03],
        "Regidor":                  [13580,0.15,0.15,0.07,0.04],
        "Río Viejo":                [13600,0.15,0.15,0.07,0.04],
        "San Cristóbal":            [13620,0.1,0.1,0.08,0.04],
        "San Estanislao":           [13647,0.1,0.1,0.06,0.03],
        "San Fernando":             [13650,0.1,0.1,0.04,0.03],
        "San Jacinto":              [13654,0.1,0.1,0.08,0.04],
        "San Jacinto del Cauca":    [13655,0.15,0.15,0.08,0.04],
        "San Juan Nepomuceno":      [13657,0.1,0.1,0.08,0.04],
        "San Martín de Loba":       [13667,0.15,0.15,0.06,0.04],
        "San Pablo":                [13670,0.15,0.15,0.36,0.04],
        "Santa Catalina":           [13673,0.1,0.1,0.06,0.03],
        "Santa Rosa":               [13683,0.1,0.1,0.05,0.03],
        "Santa Rosa del Sur":       [13688,0.15,0.15,0.08,0.04],
        "Simití":                   [13744,0.15,0.15,0.08,0.04],
        "Soplaviento":              [13760,0.1,0.1,0.08,0.04],
        "Talaigua Nuevo":           [13780,0.1,0.1,0.04,0.03],
        "Tiquisio":                 [13810,0.15,0.15,0.08,0.05],
        "Turbaco":                  [13836,0.1,0.1,0.05,0.03],
        "Turbaná":                  [13838,0.1,0.1,0.05,0.03],
        "Villanueva":               [13873,0.1,0.1,0.05,0.03],
        "Zambrano":                 [13894,0.1,0.1,0.06,0.03]
    },
    'Boyacá':{
        "Tunja":                    [15001,0.2,0.2,0.15,0.07],
        "Almeida":                  [15022,0.25,0.25,0.16,0.08],
        "Aquitania":                [15047,0.25,0.3,0.16,0.08],
        "Arcabuco":                 [15051,0.2,0.2,0.09,0.05],
        "Belén":                    [15087,0.25,0.25,0.16,0.08],
        "Berbeo":                   [15090,0.25,0.25,0.16,0.08],
        "Beteitiva":                [15092,0.25,0.25,0.16,0.08],
        "Boavita":                  [15097,0.25,0.25,0.16,0.08],
        "Boyacá":                   [15104,0.2,0.2,0.14,0.06],
        "Briceño":                  [15106,0.15,0.15,0.12,0.07],
        "Buenavista":               [15109,0.15,0.15,0.11,0.06],
        "Busbanzá":                 [15114,0.25,0.25,0.16,0.08],
        "Caldas":                   [15131,0.15,0.15,0.11,0.06],
        "Campohermoso":             [15135,0.3,0.25,0.16,0.08],
        "Cerinza":                  [15162,0.2,0.25,0.15,0.07],
        "Chinavita":                [15172,0.2,0.25,0.16,0.08],
        "Chiquinquirá":             [15176,0.15,0.2,0.1,0.06],
        "Chíquiza":                 [15232,0.2,0.2,0.1,0.05],
        "Chiscas":                  [15180,0.25,0.3,0.16,0.08],
        "Chita":                    [15183,0.25,0.3,0.16,0.08],
        "Chitaraque":               [15185,0.15,0.2,0.1,0.06],
        "Chivatá":                  [15187,0.15,0.25,0.14,0.07],
        "Chivor":                   [15236,0.25,0.25,0.16,0.08],
        "Ciénega":                  [15189,0.2,0.25,0.16,0.08],
        "Cómbita":                  [15204,0.2,0.2,0.11,0.05],
        "Coper":                    [15212,0.15,0.15,0.11,0.06],
        "Corrales":                 [15215,0.25,0.25,0.16,0.08],
        "Covarachia":               [15218,0.2,0.25,0.14,0.07],
        "Cubará":                   [15223,0.3,0.3,0.16,0.08],
        "Cucaita":                  [15224,0.2,0.2,0.11,0.05],
        "Cuitiva":                  [15226,0.25,0.25,0.16,0.08],
        "Duitama":                  [15238,0.2,0.25,0.14,0.07],
        "El Cocuy":                 [15244,0.25,0.3,0.22,0.08],
        "El Espino":                [15248,0.25,0.3,0.16,0.08],
        "Firavitoba":               [15272,0.2,0.25,0.16,0.08],
        "Floresta":                 [15276,0.25,0.25,0.16,0.08],
        "Gachantiva":               [15293,0.15,0.2,0.09,0.05],
        "Gámeza":                   [15296,0.25,0.25,0.16,0.08],
        "Garagoa":                  [15299,0.25,0.3,0.16,0.08],
        "Guacamayas":               [15317,0.25,0.25,0.18,0.08],
        "Guateque":                 [15322,0.2,0.25,0.16,0.07],
        "Guayatá":                  [15325,0.25,0.25,0.16,0.08],
        "Guicán":                   [15332,0.3,0.3,0.16,0.08],
        "Iza":                      [15362,0.2,0.25,0.16,0.08],
        "Jenesano":                 [15367,0.2,0.25,0.15,0.07],
        "Jericó":                   [15368,0.25,0.25,0.16,0.08],
        "La Capilla":               [15380,0.2,0.25,0.16,0.07],
        "La Uvita":                 [15403,0.25,0.25,0.16,0.08],
        "La Victoria":              [15401,0.15,0.15,0.16,0.08],
        "Labranzagrande":           [15377,0.3,0.25,0.16,0.08],
        "Macanal":                  [15425,0.25,0.25,0.16,0.08],
        "Maripí":                   [15442,0.2,0.15,0.13,0.07],
        "Miraflores":               [15455,0.2,0.25,0.16,0.08],
        "Mongua":                   [15464,0.25,0.3,0.16,0.08],
        "Monguí":                   [15466,0.25,0.25,0.16,0.08],
        "Moniquirá":                [15469,0.15,0.2,0.1,0.06],
        "Motavita":                 [15476,0.2,0.2,0.11,0.05],
        "Muzo":                     [15480,0.15,0.15,0.15,0.08],
        "Nobsa":                    [15491,0.25,0.25,0.16,0.08],
        "Nuevo Colón":              [15494,0.2,0.2,0.13,0.06],
        "Oicatá":                   [15500,0.2,0.25,0.13,0.06],
        "Otanche":                  [15507,0.15,0.15,0.16,0.08],
        "Pachavita":                [15511,0.25,0.25,0.16,0.07],
        "Páez":                     [15514,0.3,0.25,0.16,0.08],
        "Paipa":                    [15516,0.2,0.25,0.12,0.06],
        "Pajarito":                 [15518,0.3,0.25,0.16,0.08],
        "Panqueba":                 [15522,0.25,0.3,0.16,0.08],
        "Pauna":                    [15531,0.15,0.15,0.15,0.07],
        "Paya":                     [15533,0.35,0.25,0.16,0.08],
        "Paz de rio":               [15537,0.25,0.25,0.16,0.08],
        "Pesca":                    [15542,0.2,0.25,0.16,0.08],
        "Pisba":                    [15550,0.3,0.25,0.16,0.08],
        "Puerto Boyacá":            [15572,0.15,0.15,0.1,0.05],
        "Quipama":                  [15580,0.15,0.15,0.16,0.08],
        "Ramiriquí":                [15599,0.2,0.25,0.16,0.08],
        "Ráquira":                  [15600,0.2,0.2,0.09,0.05],
        "Rondón":                   [15621,0.2,0.25,0.16,0.08],
        "Saboyá":                   [15632,0.15,0.2,0.1,0.06],
        "Sáchica":                  [15638,0.2,0.2,0.09,0.05],
        "Samacá":                   [15646,0.2,0.2,0.1,0.05],
        "San Eduardo":              [15660,0.25,0.25,0.16,0.08],
        "San José de pare":         [15664,0.15,0.2,0.11,0.06],
        "San luis de gaceno":       [15667,0.35,0.3,0.16,0.07],
        "San Mateo":                [15673,0.25,0.25,0.16,0.08],
        "San Miguel de sema":       [15676,0.15,0.2,0.09,0.05],
        "San pabloborbur":          [15681,0.15,0.15,0.16,0.08],
        "San rosa viterbo":         [15693,0.2,0.25,0.16,0.08],
        "Santa maria":              [15690,0.3,0.25,0.16,0.08],
        "Santa sofia":              [15696,0.15,0.2,0.09,0.05],
        "Santana":                  [15686,0.15,0.2,0.13,0.07],
        "Sativanorte":              [15720,0.25,0.25,0.16,0.08],
        "Sativasur":                [15723,0.25,0.25,0.16,0.08],
        "Siachoque":                [15740,0.15,0.25,0.16,0.08],
        "Soatá":                    [15753,0.25,0.25,0.16,0.07],
        "Socha":                    [15757,0.25,0.25,0.16,0.08],
        "Socotá":                   [15755,0.25,0.3,0.16,0.08],
        "Sogamoso":                 [15759,0.25,0.25,0.16,0.08],
        "Somondoco":                [15761,0.25,0.25,0.16,0.08],
        "Sora":                     [15762,0.2,0.2,0.1,0.05],
        "Soracá":                   [15764,0.2,0.25,0.14,0.07],
        "Sotaquirá":                [15763,0.2,0.2,0.11,0.06],
        "Susacón":                  [15774,0.25,0.25,0.16,0.08],
        "Sutamarchán":              [15776,0.15,0.2,0.09,0.05],
        "Sutatenza":                [15778,0.25,0.25,0.16,0.08],
        "Tasco":                    [15790,0.25,0.25,0.16,0.08],
        "Tenza":                    [15798,0.2,0.25,0.16,0.08],
        "Tibaná":                   [15804,0.2,0.25,0.16,0.07],
        "Tibasosa":                 [15806,0.2,0.25,0.16,0.08],
        "Tinjacá":                  [15808,0.15,0.2,0.09,0.05],
        "Tipacoque":                [15810,0.25,0.25,0.15,0.07],
        "Toca":                     [15814,0.2,0.25,0.16,0.08],
        "Toguí":                    [15816,0.15,0.2,0.1,0.06],
        "Tópaga":                   [15820,0.25,0.25,0.16,0.08],
        "Tota":                     [15822,0.2,0.25,0.16,0.08],
        "Tunungua":                 [15832,0.15,0.15,0.13,0.07],
        "Turmequé":                 [15835,0.2,0.2,0.12,0.06],
        "Tuta":                     [15837,0.2,0.25,0.14,0.07],
        "Tutazá":                   [15839,0.25,0.25,0.16,0.08],
        "Úmbita":                   [15842,0.2,0.25,0.15,0.06],
        "Ventaquemada":             [15861,0.2,0.2,0.11,0.05],
        "Villa de Leyva":           [15407,0.2,0.2,0.09,0.05],
        "Viracachá":                [15879,0.2,0.25,0.16,0.08],
        "Zetaquirá":                [15897,0.2,0.25,0.16,0.08]
    },
    'Caldas':{
        "Manizales":                [17001,0.25,0.25,0.2,0.1],
        "Aguadas":                  [17013,0.25,0.25,0.2,0.1],
        "Anserma":                  [17042,0.25,0.3,0.2,0.1],
        "Aranzazu":                 [17050,0.25,0.25,0.19,0.09],
        "Belalcázar":               [17088,0.25,0.3,0.2,0.1],
        "Chinchiná":                [17174,0.25,0.25,0.2,0.1],
        "Filadelfia":               [17272,0.25,0.25,0.2,0.1],
        "La dorada":                [17380,0.15,0.2,0.11,0.06],
        "La merced":                [17388,0.25,0.25,0.21,0.1],
        "Manzanares":               [17433,0.2,0.2,0.2,0.1],
        "Marmato":                  [17442,0.25,0.25,0.2,0.1],
        "Marquetalia":              [17444,0.2,0.2,0.17,0.08],
        "Marulanda":                [17446,0.2,0.25,0.18,0.09],
        "Neira":                    [17486,0.25,0.25,0.19,0.1],
        "Norcasia":                 [17495,0.15,0.2,0.15,0.07],
        "Pácora":                   [17513,0.25,0.25,0.2,0.1],
        "Palestina":                [17524,0.25,0.25,0.2,0.1],
        "Pensilvania":              [17541,0.2,0.2,0.18,0.09],
        "Riosucio":                 [17614,0.25,0.3,0.2,0.1],
        "Risaralda":                [17616,0.25,0.3,0.2,0.1],
        "Salamina":                 [17653,0.25,0.25,0.18,0.09],
        "Samaná":                   [17662,0.2,0.2,0.19,0.09],
        "San josé ":                [17665,0.25,0.3,0.2,0.1],
        "Supía":                    [17777,0.15,0.3,0.2,0.1],
        "Victoria":                 [17867,0.25,0.2,0.13,0.06],
        "Villamaría":               [17873,0.25,0.25,0.18,0.09],
        "Viterbo":                  [17877,0.25,0.3,0.23,0.1]
    },
    'Caqueta':{
        "Florencia":                [18001,0.2,0.15,0.1,0.05],
        "Albania":                  [18029,0.15,0.15,0.06,0.04],
        "Belén de los Andaquíes ":  [18094,0.2,0.15,0.09,0.05],
        "Cartagena del chaira":     [18150,0.05,0.15,0.04,0.02],
        "Currillo":                 [18205,0.15,0.2,0.06,0.03],
        "El Doncello":              [18247,0.15,0.15,0.06,0.03],
        "El Paujil":                [18256,0.15,0.15,0.06,0.03],
        "La Montañita":             [18410,0.1,0.15,0.05,0.03],
        "Milán":                    [18460,0.05,0.15,0.04,0.02],
        "Morelia":                  [18479,0.15,0.15,0.06,0.03],
        "Puerto Rico":              [18592,0.15,0.15,0.07,0.03],
        "San José de la fragua":    [18610,0.25,0.2,0.09,0.05],
        "San Vicente del Caguán":   [18753,0.05,0.05,0.04,0.02],
        "Solano":                   [18756,0.05,0.05,0.04,0.02],
        "Solita":                   [18785,0.05,0.15,0.04,0.02],
        "Valparaíso":               [18860,0.05,0.15,0.04,0.03]
    },
    'Casanare':{
        "Yopal":                    [85001,0.3,0.2,0.15,0.06],
        "Aguazul":                  [85010,0.3,0.2,0.14,0.06],
        "Chámeza":                  [85015,0.3,0.3,0.16,0.08],
        "Hato Corozal":             [85125,0.15,0.15,0.08,0.04],
        "La Salina":                [85136,0.3,0.3,0.16,0.08],
        "Maní":                     [85139,0.1,0.15,0.04,0.02],
        "Monterrey":                [85162,0.3,0.25,0.11,0.05],
        "Nunchía":                  [85225,0.2,0.15,0.09,0.04],
        "Orocué":                   [85230,0.05,0.15,0.04,0.02],
        "Paz de Ariporo":           [85250,0.05,0.15,0.04,0.02],
        "Pore":                     [85263,0.2,0.15,0.08,0.04],
        "Recetor":                  [85279,0.3,0.3,0.16,0.08],
        "Sabanalarga":              [85300,0.35,0.3,0.13,0.05],
        "Sácama":                   [85315,0.35,0.2,0.16,0.08],
        "San luis de Palenque":     [85325,0.1,0.15,0.04,0.02],
        "Támara":                   [85400,0.35,0.15,0.16,0.08],
        "Tauramena":                [85410,0.15,0.2,0.06,0.03],
        "Trinidad":                 [85430,0.05,0.15,0.04,0.02],
        "Villanueva":               [85440,0.2,0.2,0.06,0.03]
    },
    'Cauca':{
        "Popayán":                  [19001,0.25,0.2,0.15,0.08],
        "Almaguer":                 [19022,0.25,0.25,0.16,0.08],
        "Argelia":                  [19050,0.35,0.25,0.09,0.06],
        "Balboa":                   [19075,0.3,0.25,0.16,0.08],
        "Bolívar":                  [19100,0.25,0.25,0.15,0.07],
        "Buenos Aires":             [19110,0.25,0.2,0.16,0.08],
        "Cajibío":                  [19130,0.25,0.2,0.15,0.08],
        "Caldonó":                  [19137,0.25,0.2,0.16,0.07],
        "Caloto":                   [19142,0.25,0.2,0.16,0.07],
        "Corinto":                  [19212,0.25,0.2,0.12,0.06],
        "El Tambo":                 [19256,0.3,0.25,0.14,0.08],
        "Florencia":                [19290,0.25,0.25,0.14,0.07],
        "Guapí":                    [19318,0.4,0.35,0.14,0.08],
        "Inzá":                     [19355,0.25,0.2,0.12,0.06],
        "Jambaló":                  [19364,0.25,0.2,0.11,0.06],
        "La Sierra":                [19392,0.25,0.2,0.16,0.08],
        "La Vega":                  [19397,0.25,0.2,0.16,0.07],
        "López":                    [19418,0.4,0.3,0.14,0.07],
        "Mercaderes":               [19450,0.25,0.25,0.15,0.08],
        "Miranda":                  [19455,0.25,0.2,0.13,0.06],
        "Morales":                  [19473,0.25,0.2,0.16,0.08],
        "Padilla":                  [19513,0.25,0.2,0.16,0.07],
        "Páez":                     [19517,0.25,0.2,0.11,0.05],
        "Patía":                    [19532,0.25,0.25,0.16,0.08],
        "Piamonte":                 [19533,0.25,0.2,0.09,0.05],
        "Piendamó":                 [19548,0.25,0.2,0.16,0.08],
        "Puerto Tejada":            [19573,0.25,0.2,0.13,0.08],
        "Puracé":                   [19585,0.25,0.2,0.12,0.06],
        "Rosas":                    [19622,0.25,0.2,0.16,0.08],
        "San Sebastián":            [19693,0.25,0.25,0.15,0.07],
        "Santa Rosa":               [19701,0.25,0.25,0.16,0.08],
        "Santander de Quilichao":   [19698,0.25,0.2,0.14,0.08],
        "Silvia":                   [19743,0.25,0.2,0.1,0.05],
        "Sotará":                   [19760,0.25,0.2,0.13,0.07],
        "Suárez":                   [19780,0.25,0.2,0.16,0.08],
        "Sucre":                    [19785,0.25,0.25,0.14,0.08],
        "Timbío":                   [19807,0.25,0.2,0.16,0.08],
        "Timbiquí":                 [19809,0.4,0.3,0.14,0.08],
        "Toribío":                  [19821,0.25,0.2,0.09,0.05],
        "Totoró":                   [19824,0.25,0.2,0.1,0.05],
        "Villa Rica":               [19845,0.25,0.2,0.14,0.08]
    },
    'Cesar':{
        "Valledupar":               [20001,0.1,0.1,0.05,0.03],
        "Aguachica":                [20011,0.15,0.15,0.08,0.04],
        "Agustín Codazzi":          [20013,0.1,0.1,0.07,0.04],
        "Astréa":                   [20032,0.1,0.1,0.08,0.04],
        "Becerril":                 [20045,0.1,0.1,0.08,0.04],
        "Bosconia":                 [20060,0.1,0.1,0.08,0.04],
        "Chimichagua":              [20175,0.1,0.1,0.08,0.04],
        "Chiriguaná":               [20178,0.1,0.1,0.08,0.04],
        "Curumaní":                 [20228,0.15,0.1,0.08,0.04],
        "El Copey":                 [20238,0.1,0.1,0.08,0.04],
        "El Paso":                  [20250,0.1,0.1,0.08,0.04],
        "Gamarra":                  [20295,0.15,0.15,0.08,0.04],
        "González":                 [20310,0.2,0.15,0.08,0.04],
        "La Gloria":                [20383,0.15,0.15,0.08,0.04],
        "La Jagua de Ibirico":      [20400,0.1,0.1,0.08,0.04],
        "La Paz":                   [20621,0.1,0.1,0.06,0.03],
        "Manaure":                  [20443,0.1,0.1,0.08,0.04],
        "Pailitas":                 [20517,0.15,0.1,0.08,0.04],
        "Pelaya":                   [20550,0.15,0.15,0.08,0.04],
        "Pueblo Bello":             [20570,0.1,0.1,0.05,0.03],
        "Río de oro":               [20614,0.2,0.15,0.08,0.04],
        "San alberto":              [20710,0.2,0.15,0.08,0.04],
        "San diego":                [20750,0.1,0.1,0.05,0.03],
        "San martin":               [20770,0.2,0.15,0.08,0.04],
        "Tamalameque":              [20787,0.15,0.1,0.08,0.04]
    },
    'Chocó':{
        "Quibdó":                   [27001,0.35,0.35,0.25,0.13],
        "Acandí":                   [27006,0.25,0.25,0.09,0.04],
        "Alto baudo":               [27025,0.4,0.4,0.24,0.1],
        "Atrato":                   [27050,0.35,0.35,0.24,0.1],
        "Bagadó":                   [27073,0.35,0.3,0.24,0.1],
        "Bahía solano":             [27075,0.45,0.4,0.24,0.1],
        "Bajo Baudó":               [27077,0.45,0.4,0.24,0.1],
        "Belén de Bajirá":          [27086,0.25,0.3,0.24,0.1],
        "Bojayá":                   [27099,0.4,0.4,0.24,0.1],
        "Cantón de san pablo":      [27135,0.4,0.4,0.24,0.1],
        "Carmen del Darién":        [27150,0.35,0.35,0.24,0.1],
        "Certeguí":                 [27160,0.35,0.35,0.24,0.1],
        "Condoto":                  [27205,0.35,0.35,0.24,0.1],
        "El Carmen de atrato":      [27245,0.3,0.3,0.24,0.1],
        "El litoral de san juan":   [27250,0.4,0.4,0.2,0.1],
        "Itsmína":                  [27361,0.4,0.4,0.23,0.1],
        "Juradó":                   [27372,0.4,0.4,0.24,0.1],
        "Lloró":                    [27413,0.4,0.35,0.24,0.1],
        "Medio Atrato":             [27425,0.35,0.35,0.24,0.1],
        "Medio Baudó":              [27430,0.45,0.4,0.24,0.1],
        "Medio san juan":           [27450,0.4,0.4,0.24,0.1],
        "Nóvita":                   [27491,0.4,0.35,0.24,0.1],
        "Nuquí":                    [27495,0.45,0.4,0.24,0.1],
        "Río iro":                  [27580,0.35,0.35,0.24,0.1],
        "Río quito":                [27600,0.35,0.4,0.24,0.1],
        "Riosucio":                 [27615,0.35,0.35,0.24,0.1],
        "San José del Palmar":      [27660,0.35,0.3,0.24,0.1],
        "Sipí":                     [27745,0.35,0.35,0.24,0.1],
        "Tadó":                     [27787,0.35,0.35,0.24,0.1],
        "Unguía":                   [27800,0.25,0.25,0.15,0.07],
        "Unión Panamericana":       [27810,0.4,0.4,0.24,0.1]
    },
    'Córdoba':{
        "Montería":                 [23001,0.1,0.2,0.07,0.04],
        'Ayapel':                   [23068,0.15,0.15,0.07,0.04],
        'Buenavista':               [23079,0.15,0.20,0.08,0.04],
        'Canalete':                 [23090,0.10,0.20,0.08,0.04],
        "Cereté":                   [23162,0.1,0.15,0.06,0.04],
        "Chimá":                    [23168,0.1,0.15,0.07,0.04],
        "Chinú":                    [23182,0.1,0.15,0.08,0.04],
        "Ciénaga de oro":           [23189,0.1,0.15,0.08,0.04],
        "Cotorra":                  [23300,0.1,0.15,0.06,0.03],
        "La Apartada":              [23350,0.15,0.2,0.08,0.04],
        "Lorica":                   [23417,0.1,0.15,0.05,0.03],
        "Los Córdobas":             [23419,0.1,0.2,0.08,0.05],
        "Momil":                    [23464,0.1,0.15,0.07,0.03],
        "Montelíbano":              [23466,0.15,0.2,0.08,0.04],
        "Moñitos":                  [23500,0.1,0.15,0.05,0.03],
        "Planeta Rica":             [23555,0.15,0.2,0.08,0.04],
        "Pueblo Nuevo":             [23570,0.15,0.15,0.08,0.05],
        "Puerto Escondido":         [23574,0.1,0.2,0.06,0.04],
        "Puerto Libertador":        [23580,0.15,0.2,0.08,0.04],
        "Purísima":                 [23586,0.1,0.15,0.06,0.03],
        "Sahagún":                  [23660,0.15,0.15,0.08,0.04],
        "San Andrés de Sotavento":  [23670,0.1,0.15,0.08,0.04],
        "San Antero":               [23672,0.1,0.15,0.05,0.03],
        "San bernardo del viento":  [23675,0.1,0.15,0.05,0.03],
        "San Carlos":               [23678,0.1,0.15,0.08,0.04],
        "San Pelayo":               [23686,0.1,0.15,0.06,0.03],
        "Tierralta":                [23807,0.2,0.2,0.08,0.04],
        "Valencia":                 [23855,0.15,0.2,0.08,0.04]
    },
    'Cundinamarca':{
        "Bogotá D.C.":              [11001,0.15,0.2,0.13,0.06],
        "Agua de Dios":             [25001,0.2,0.2,0.11,0.06],
        "Albán":                    [25019,0.15,0.2,0.16,0.06],
        "Anapóima":                 [25035,0.15,0.2,0.13,0.06],
        "Anolaima":                 [25040,0.15,0.2,0.16,0.06],
        "Apulo":                    [25599,0.2,0.2,0.12,0.06],
        "Arbeláez":                 [25053,0.2,0.2,0.09,0.05],
        "Beltrán":                  [25086,0.2,0.2,0.13,0.06],
        "Bituima":                  [25095,0.15,0.2,0.16,0.06],
        "Bojacá":                   [25099,0.15,0.2,0.11,0.06],
        "Cabrera":                  [25120,0.25,0.25,0.12,0.06],
        "Cachipay":                 [25123,0.15,0.2,0.15,0.06],
        "Cajicá":                   [25126,0.15,0.2,0.09,0.05],
        "Caparrapí":                [25148,0.15,0.2,0.15,0.06],
        "Cáqueza":                  [25151,0.25,0.25,0.15,0.06],
        "Carmen de carupa":         [25154,0.15,0.15,0.09,0.05],
        "Chaguaní":                 [25168,0.15,0.2,0.16,0.06],
        "Chía":                     [25175,0.15,0.2,0.09,0.05],
        "Chipaque":                 [25178,0.2,0.25,0.11,0.05],
        "Choachí":                  [25181,0.2,0.25,0.12,0.06],
        "Chocontá":                 [25183,0.15,0.2,0.1,0.05],
        "Cogua":                    [25200,0.15,0.2,0.09,0.05],
        "Cota":                     [25214,0.15,0.2,0.09,0.05],
        "Cucunubá":                 [25224,0.15,0.2,0.09,0.05],
        "El Colegio":               [25245,0.15,0.2,0.11,0.06],
        "El Peñón":                 [25258,0.15,0.2,0.13,0.06],
        "El Rosal":                 [25260,0.15,0.2,0.1,0.06],
        "Facatativá":               [25269,0.15,0.2,0.12,0.06],
        "Fómeque":                  [25279,0.25,0.25,0.16,0.06],
        "Fosca":                    [25281,0.25,0.25,0.16,0.06],
        "Funza":                    [25286,0.15,0.2,0.1,0.06],
        "Fúquene":                  [25288,0.15,0.2,0.08,0.05],
        "Fusagasugá":               [25290,0.2,0.2,0.09,0.05],
        "Gachalá":                  [25293,0.3,0.25,0.26,0.06],
        "Gachancipá":               [25295,0.15,0.2,0.09,0.05],
        "Gachetá":                  [25297,0.2,0.25,0.15,0.06],
        "Gama":                     [25299,0.25,0.25,0.16,0.06],
        "Girardot":                 [25307,0.2,0.2,0.12,0.06],
        "Granada":                  [25312,0.15,0.2,0.1,0.05],
        "Guachetá":                 [25317,0.15,0.15,0.08,0.05],
        "Guaduas":                  [25320,0.15,0.2,0.15,0.06],
        "Guasca":                   [25322,0.15,0.25,0.11,0.05],
        "Guataquí":                 [25324,0.2,0.2,0.16,0.06],
        "Guatavita":                [25326,0.15,0.2,0.11,0.05],
        "Guayabal de Síquima":      [25328,0.15,0.2,0.16,0.06],
        "Guayabetal":               [25335,0.3,0.25,0.16,0.06],
        "Gutiérrez":                [25339,0.25,0.25,0.16,0.06],
        "Jerusalén":                [25368,0.2,0.2,0.16,0.06],
        "Junín":                    [25372,0.2,0.25,0.16,0.06],
        "La Calera":                [25377,0.15,0.2,0.11,0.05],
        "La Mesa":                  [25386,0.15,0.2,0.14,0.06],
        "La Palma":                 [25394,0.15,0.2,0.16,0.06],
        "La Peña":                  [25398,0.15,0.2,0.16,0.06],
        "La Vega":                  [25402,0.15,0.2,0.12,0.06],
        "Lenguazaque":              [25407,0.15,0.2,0.09,0.05],
        "Machetá":                  [25426,0.2,0.25,0.13,0.06],
        "Madrid":                   [25430,0.15,0.2,0.1,0.06],
        "Manta":                    [25436,0.2,0.25,0.15,0.06],
        "Medina":                   [25438,0.35,0.25,0.16,0.06],
        "Mosquera":                 [25473,0.15,0.2,0.1,0.06],
        "Nariño":                   [25483,0.2,0.2,0.13,0.06],
        "Nemocón":                  [25486,0.15,0.2,0.09,0.05],
        "Nilo":                     [25488,0.2,0.2,0.1,0.05],
        "Nimáima":                  [25489,0.15,0.2,0.14,0.06],
        "Nocáima":                  [25491,0.15,0.2,0.14,0.06],
        "Pacho":                    [25513,0.15,0.2,0.1,0.06],
        "Paime":                    [25518,0.15,0.2,0.12,0.06],
        "Pandi":                    [25524,0.2,0.2,0.09,0.05],
        "Paratebueno":              [25530,0.3,0.25,0.09,0.04],
        "Pasca":                    [25535,0.2,0.2,0.1,0.05],
        "Puerto Salgar":            [25572,0.15,0.2,0.11,0.06],
        "Pulí":                     [25580,0.2,0.2,0.14,0.06],
        "Quebradanegra":            [25592,0.15,0.2,0.16,0.06],
        "Quetame":                  [25594,0.25,0.25,0.16,0.08],
        "Quipile":                  [25596,0.15,0.2,0.16,0.08],
        "Ricaurte":                 [25612,0.2,0.2,0.11,0.06],
        "San Antonio de Tequendama":[25645,0.15,0.2,0.1,0.06],
        "San Bernardo":             [25649,0.25,0.2,0.1,0.05],
        "San Cayetano":             [25653,0.15,0.15,0.1,0.06],
        "San Francisco":            [25658,0.15,0.2,0.11,0.06],
        "San Juan de Rioseco":      [25662,0.2,0.2,0.16,0.06],
        "Sasaima":                  [25718,0.15,0.2,0.16,0.06],
        "Sesquilé":                 [25736,0.15,0.2,0.1,0.05],
        "Sibaté":                   [25740,0.15,0.2,0.09,0.05],
        "Silvania":                 [25743,0.2,0.2,0.09,0.05],
        "Simijaca":                 [25745,0.15,0.15,0.09,0.05],
        "Soacha":                   [25754,0.15,0.2,0.09,0.05],
        "Sopó":                     [25758,0.15,0.2,0.09,0.05],
        "Subachoque":               [25769,0.15,0.2,0.1,0.06],
        "Suesca":                   [25772,0.15,0.2,0.09,0.05],
        "Supatá":                   [25777,0.15,0.2,0.11,0.06],
        "Susa":                     [25779,0.15,0.2,0.09,0.05],
        "Sutatausa":                [25781,0.15,0.2,0.08,0.05],
        "Tábio":                    [25785,0.15,0.2,0.09,0.05],
        "Tausa":                    [25793,0.15,0.2,0.09,0.05],
        "Tena":                     [25797,0.15,0.2,0.12,0.06],
        "Tenjo":                    [25799,0.15,0.2,0.09,0.05],
        "Tibacuy":                  [25805,0.2,0.2,0.09,0.05],
        "Tibiritá":                 [25807,0.2,0.25,0.15,0.06],
        "Tocaima":                  [25815,0.2,0.2,0.12,0.06],
        "Tocancipá":                [25817,0.15,0.2,0.09,0.05],
        "Topaipí":                  [25823,0.15,0.15,0.15,0.06],
        "Ubalá":                    [25839,0.35,0.25,0.16,0.06],
        "Ubaque":                   [25841,0.2,0.25,0.12,0.06],
        "Ubaté":                    [25843,0.15,0.2,0.08,0.05],
        "Une":                      [25845,0.2,0.25,0.13,0.06],
        "Útica":                    [25851,0.15,0.2,0.18,0.06],
        "Venecia":                  [25506,0.25,0.2,0.1,0.05],
        "Vergara":                  [25862,0.15,0.2,0.12,0.06],
        "Vianí":                    [25867,0.15,0.2,0.16,0.06],
        "Villagómez":               [25871,0.15,0.15,0.11,0.06],
        "Villapinzón":              [25873,0.2,0.2,0.11,0.05],
        "Villeta":                  [25875,0.15,0.2,0.17,0.06],
        "Viotá":                    [25878,0.2,0.2,0.1,0.05],
        "Yacopí":                   [25885,0.15,0.15,0.15,0.06],
        "Zipacón":                  [25898,0.15,0.2,0.13,0.06],
        "Zipaquirá":                [25899,0.15,0.2,0.09,0.05]
    },
    'Guainia': {
        "Puerto Inírida":           [94001, 0.05, 0.05, 0.04, 0.02],
        "Barranco Mina":            [94343, 0.05, 0.05, 0.04, 0.02],
        "Cacahual":                 [94886, 0.05, 0.05, 0.04, 0.02],
        "La Guadalupe":             [94885, 0.05, 0.05, 0.04, 0.02],
        "Mapiripaná":               [94663, 0.05, 0.05, 0.04, 0.02],
        "Morichal":                 [94888, 0.05, 0.05, 0.04, 0.02],
        "Pana Pana":                [94887, 0.05, 0.05, 0.04, 0.02],
        "Puerto Colombia":          [94884, 0.05, 0.05, 0.04, 0.02],
        "San Felipe":               [94883, 0.05, 0.05, 0.04, 0.02]
    },
    'Guajira': {
        "Riohacha":                 [44001, 0.1, 0.15, 0.07, 0.04],
        "Albania":                  [44035, 0.1, 0.1, 0.08, 0.04],
        "Barrancas":                [44078, 0.15, 0.1, 0.08, 0.04],
        "Dibulla":                  [44090, 0.15, 0.1, 0.08, 0.04],
        "Distracción":              [44098, 0.15, 0.1, 0.08, 0.04],
        "El Molino":                [44110, 0.1, 0.1, 0.06, 0.04],
        "Fonseca":                  [44279, 0.15, 0.1, 0.07, 0.04],
        "Hatonuevo":                [44378, 0.15, 0.1, 0.08, 0.04],
        "La Jagua del pilar":       [44420, 0.1, 0.1, 0.05, 0.03],
        "Maicao":                   [44430, 0.1, 0.15, 0.07, 0.04],
        "Manaure":                  [44560, 0.1, 0.15, 0.07, 0.04],
        "San juan del cesar":       [44650, 0.15, 0.1, 0.05, 0.03],
        "Uribía":                   [44847, 0.15, 0.15, 0.08, 0.04],
        "Urumita":                  [44855, 0.1, 0.1, 0.06, 0.03],
        "Villanueva":               [44874, 0.1, 0.1, 0.05, 0.03]
    },
    'Guaviare': {
        "San José del Guaviare":    [95001, 0.05, 0.05, 0.04, 0.02],
        "Calamar":                  [95015, 0.05, 0.05, 0.04, 0.02],
        "El retorno":               [95025, 0.05, 0.05, 0.04, 0.02],
        "Miraflores":               [95200, 0.05, 0.05, 0.04, 0.02]
    },
    'Huila': {
        "Neiva":                    [41001, 0.25, 0.25, 0.2, 0.08],
        "Acevedo":                  [41006, 0.3, 0.15, 0.17, 0.06],
        "Agrado":                   [41013, 0.3, 0.15, 0.26, 0.08],
        "Aipe":                     [41016, 0.25, 0.25, 0.14, 0.05],
        "Algeciras":                [41020, 0.3, 0.2, 0.2, 0.08],
        "Altamira":                 [41026, 0.3, 0.15, 0.2, 0.08],
        "Baraya":                   [41078, 0.3, 0.25, 0.19, 0.08],
        "Campoalegre":              [41132, 0.3, 0.2, 0.2, 0.08],
        "Colombia":                 [41206, 0.3, 0.25, 0.19, 0.08],
        "Elías":                    [41244, 0.3, 0.15, 0.2, 0.08],
        "Garzón":                   [41298, 0.3, 0.15, 0.2, 0.07],
        "Gigante":                  [41306, 0.3, 0.15, 0.2, 0.08],
        "Guadalupe":                [41319, 0.3, 0.15, 0.16, 0.06],
        "Hobo":                     [41349, 0.3, 0.2, 0.2, 0.08],
        "Iquira":                   [41357, 0.25, 0.2, 0.16, 0.06],
        "Isnos":                    [41359, 0.25, 0.2, 0.19, 0.07],
        "La Argentina":             [41378, 0.25, 0.15, 0.19, 0.07],
        "La Plata":                 [41396, 0.25, 0.15, 0.19, 0.07],
        "Nátaga":                   [41483, 0.25, 0.2, 0.19, 0.07],
        "Oporapa":                  [41503, 0.3, 0.15, 0.2, 0.08],
        "Paicol":                   [41518, 0.25, 0.2, 0.2, 0.08],
        "Palermo":                  [41524, 0.25, 0.25, 0.18, 0.07],
        "Palestina":                [41530, 0.3, 0.2, 0.2, 0.08],
        "Pital":                    [41548, 0.3, 0.15, 0.2, 0.08],
        "Pitalito":                 [41551, 0.3, 0.15, 0.2, 0.08],
        "Rivera":                   [41615, 0.3, 0.2, 0.2, 0.08],
        "Saladoblanco":             [41660, 0.25, 0.2, 0.2, 0.07],
        "San Agustín":              [41668, 0.25, 0.2, 0.19, 0.08],
        "Santa María":              [41676, 0.25, 0.2, 0.14, 0.05],
        "Suazá":                    [41770, 0.3, 0.15, 0.16, 0.06],
        "Tarquí":                   [41791, 0.3, 0.15, 0.2, 0.08],
        "Tello":                    [41799, 0.3, 0.25, 0.19, 0.08],
        "Teruel":                   [41801, 0.25, 0.2, 0.19, 0.07],
        "Tesalia":                  [41797, 0.25, 0.2, 0.19, 0.07],
        "Timaná":                   [41807, 0.3, 0.15, 0.2, 0.08],
        "Villavieja":               [41872, 0.25, 0.25, 0.19, 0.07],
        "Yaguará":                  [41885, 0.25, 0.2, 0.19, 0.08]
    },
    'Magdalena': {
        "Santa Marta":                  [47001, 0.15, 0.1, 0.1, 0.04],
        "Algarrobo":                    [47030, 0.1, 0.1, 0.05, 0.02],
        "Aracataca":                    [47053, 0.1, 0.1, 0.04, 0.02],
        "Ariguaní":                     [47058, 0.1, 0.1, 0.04, 0.02],
        "Cerro san antonio":            [47161, 0.1, 0.1, 0.04, 0.02],
        "Chivolo":                      [47170, 0.1, 0.1, 0.04, 0.02],
        "Ciénaga":                      [47189, 0.1, 0.1, 0.06, 0.02],
        "Concordia":                    [47205, 0.1, 0.1, 0.04, 0.02],
        "El banco":                     [47245, 0.1, 0.1, 0.04, 0.02],
        "El reten":                     [47268, 0.1, 0.1, 0.04, 0.02],
        "Elpiñon":                      [47258, 0.1, 0.1, 0.04, 0.02],
        "Fundación":                    [47288, 0.1, 0.1, 0.05, 0.02],
        "Guamal":                       [47318, 0.1, 0.1, 0.04, 0.02],
        "Nueva granada":                [47460, 0.1, 0.1, 0.04, 0.02],
        "Pedraza":                      [47541, 0.1, 0.1, 0.04, 0.02],
        "Pijino del carmen":            [47545, 0.1, 0.1, 0.04, 0.02],
        "Pivijay":                      [47551, 0.1, 0.1, 0.04, 0.02],
        "Plato":                        [47555, 0.1, 0.1, 0.04, 0.02],
        "Puebloviejo":                  [47570, 0.1, 0.1, 0.04, 0.02],
        "Remolino":                     [47605, 0.1, 0.1, 0.04, 0.02],
        "Sabanas de san angel":         [47660, 0.1, 0.1, 0.04, 0.02],
        "Salamina":                     [47675, 0.1, 0.1, 0.04, 0.02],
        "San Sebastián de Buenavista":  [47692, 0.1, 0.1, 0.04, 0.02],
        "San Zenón":                    [47703, 0.1, 0.1, 0.04, 0.02],
        "Santa Ana":                    [47707, 0.1, 0.1, 0.04, 0.02],
        "Santa Bárbara de pinto":       [47720, 0.1, 0.1, 0.04, 0.02],
        "Sitionuevo":                   [47745, 0.1, 0.1, 0.05, 0.02],
        "Tenerife":                     [47798, 0.1, 0.1, 0.04, 0.02],
        "Zapayán":                      [47960, 0.1, 0.1, 0.04, 0.02],
        "Zona Bananera":                [47980, 0.1, 0.1, 0.08, 0.02]
    },
    'Meta': {
        "Villavicencio":                [50001, 0.25, 0.3, 0.2, 0.07],
        "Acacias":                      [50006, 0.3, 0.3, 0.17, 0.06],
        "Barranca de Upía":             [50110, 0.25, 0.25, 0.08, 0.04],
        "Cabuyaro":                     [50124, 0.2, 0.2, 0.06, 0.03],
        "Castilla la nueva":            [50150, 0.2, 0.25, 0.07, 0.03],
        "Cumaral":                      [50226, 0.25, 0.25, 0.09, 0.04],
        "El Calvario":                  [50245, 0.3, 0.25, 0.26, 0.08],
        "El Castillo":                  [50251, 0.25, 0.25, 0.11, 0.04],
        "El Dorado":                    [50270, 0.25, 0.25, 0.11, 0.05],
        "Fuente de Oro":                [50287, 0.15, 0.2, 0.05, 0.02],
        "Granada":                      [50313, 0.2, 0.25, 0.07, 0.03],
        "Guamal":                       [50318, 0.35, 0.25, 0.28, 0.08],
        "La Macarena":                  [50350, 0.05, 0.1, 0.03, 0.02],
        "La Uribe":                     [50370, 0.25, 0.25, 0.1, 0.04],
        "Lejanías":                     [50400, 0.3, 0.25, 0.19, 0.08],
        "Mapiripán":                    [50325, 0.05, 0.05, 0.02, 0.02],
        "Mesetas":                      [50330, 0.2, 0.25, 0.07, 0.03],
        "Puerto Concordia":             [50450, 0.05, 0.05, 0.04, 0.02],
        "Puerto Gaitán":                [50568, 0.05, 0.1, 0.04, 0.02],
        "Puerto Lleras":                [50577, 0.05, 0.15, 0.04, 0.02],
        "Puerto López":                 [50573, 0.05, 0.15, 0.04, 0.02],
        "Puerto Rico":                  [50590, 0.05, 0.1, 0.04, 0.02],
        "Restrepo":                     [50606, 0.3, 0.3, 0.13, 0.05],
        "San Carlos Guaroa":            [50680, 0.15, 0.2, 0.05, 0.03],
        "San juan de arama":            [50683, 0.15, 0.2, 0.06, 0.03],
        "San Juanito":                  [50686, 0.3, 0.25, 0.2, 0.08],
        "San luis de cubarral":         [50223, 0.35, 0.25, 0.2, 0.08],
        "San martin":                   [50689, 0.05, 0.15, 0.04, 0.02],
        "Vista hermosa":                [50711, 0.05, 0.15, 0.04, 0.02]
    },
    'Nariño': {
        "Pasto":                        [52001, 0.25, 0.25, 0.15, 0.08],
        "Albán":                        [52019, 0.25, 0.25, 0.16, 0.08],
        "Aldana":                       [52022, 0.25, 0.25, 0.14, 0.08],
        "Ancuyá":                       [52036, 0.25, 0.25, 0.15, 0.08],
        "Arboleda":                     [52051, 0.25, 0.25, 0.15, 0.08],
        "Barbacoas":                    [52079, 0.35, 0.35, 0.16, 0.08],
        "Belén":                        [52083, 0.25, 0.25, 0.16, 0.08],
        "Buesaco":                      [52110, 0.25, 0.25, 0.16, 0.08],
        "Chachagui":                    [52240, 0.25, 0.25, 0.11, 0.07],
        "Colón":                        [52203, 0.25, 0.25, 0.15, 0.08],
        "Consacá":                      [52207, 0.25, 0.25, 0.11, 0.07],
        "Contadero":                    [52210, 0.25, 0.25, 0.12, 0.07],
        "Córdoba":                      [52215, 0.25, 0.25, 0.16, 0.08],
        "Cuaspud":                      [52224, 0.25, 0.25, 0.14, 0.08],
        "Cumbal":                       [52227, 0.3, 0.25, 0.16, 0.08],
        "Cumbitará":                    [52233, 0.3, 0.3, 0.1, 0.07],
        "El charco":                    [52250, 0.4, 0.35, 0.13, 0.08],
        "El peñol":                     [52254, 0.25, 0.25, 0.16, 0.08],
        "El rosario":                   [52256, 0.3, 0.3, 0.11, 0.07],
        "El tablon":                    [52258, 0.25, 0.25, 0.16, 0.08],
        "El tambo":                     [52260, 0.25, 0.25, 0.13, 0.08],
        "Francisco pizarro":            [52520, 0.5, 0.4, 0.16, 0.08],
        "Funes":                        [52287, 0.25, 0.25, 0.16, 0.08],
        "Guachucal":                    [52317, 0.25, 0.25, 0.16, 0.08],
        "Guaitarilla":                  [52320, 0.25, 0.25, 0.13, 0.08],
        "Gualmatán":                    [52323, 0.25, 0.25, 0.12, 0.07],
        "Iles":                         [52352, 0.25, 0.25, 0.11, 0.07],
        "Imúes":                        [52354, 0.25, 0.25, 0.11, 0.07],
        "Ipiales":                      [52356, 0.3, 0.25, 0.16, 0.08],
        "La cruz":                      [52378, 0.25, 0.25, 0.16, 0.08],
        "La florida":                   [52381, 0.25, 0.25, 0.12, 0.07],
        "La llanada":                   [52385, 0.3, 0.3, 0.11, 0.07],
        "La tola":                      [52390, 0.5, 0.4, 0.16, 0.08],
        "La Unión":                     [52399, 0.25, 0.25, 0.12, 0.07],
        "Leiva":                        [52405, 0.3, 0.25, 0.15, 0.08],
        "Linares":                      [52411, 0.25, 0.25, 0.16, 0.08],
        "Los andes":                    [52418, 0.3, 0.3, 0.12, 0.07],
        "Magüí":                        [52427, 0.4, 0.35, 0.16, 0.08],
        "Mallama":                      [52435, 0.3, 0.25, 0.16, 0.08],
        "Mosquera":                     [52473, 0.5, 0.4, 0.16, 0.08],
        "Olaya herrera":                [52490, 0.5, 0.4, 0.16, 0.08],
        "Ospina":                       [52506, 0.25, 0.25, 0.12, 0.08],
        "Policarpa":                    [52540, 0.3, 0.3, 0.13, 0.08],
        "Potosí":                       [52560, 0.25, 0.25, 0.16, 0.08],
        "Providencia":                  [52565, 0.25, 0.25, 0.16, 0.08],
        "Puerres":                      [52573, 0.25, 0.25, 0.16, 0.08],
        "Pupiales":                     [52585, 0.25, 0.25, 0.12, 0.08],
        "Ricaurte":                     [52612, 0.35, 0.3, 0.16, 0.08],
        "Roberto Payán":                [52621, 0.45, 0.4, 0.16, 0.08],
        "Samaniego":                    [52678, 0.3, 0.3, 0.13, 0.08],
        "San bernardo":                 [52685, 0.25, 0.25, 0.16, 0.08],
        "San lorenzo":                  [52687, 0.25, 0.25, 0.11, 0.07],
        "San pablo":                    [52693, 0.25, 0.25, 0.16, 0.08],
        "Sandoná":                      [52683, 0.25, 0.25, 0.13, 0.08],
        "Sanpedro de cartago":          [52694, 0.25, 0.25, 0.15, 0.08],
        "Santa barbara":                [52696, 0.45, 0.35, 0.16, 0.08],
        "Santacruz":                    [52699, 0.3, 0.25, 0.16, 0.08],
        "Sapuyés":                      [52720, 0.25, 0.25, 0.16, 0.08],
        "Taminango":                    [52786, 0.25, 0.25, 0.15, 0.08],
        "Tangua":                       [52788, 0.25, 0.25, 0.13, 0.08],
        "Tumaco":                       [52835, 0.45, 0.4, 0.16, 0.08],
        "Túquerres":                    [52838, 0.25, 0.25, 0.16, 0.08],
        "Yacuanquer":                   [52885, 0.25, 0.25, 0.11, 0.07]
    },
    'Norte de Santander': {
        "Cúcuta":                       [54001, 0.35, 0.25, 0.25, 0.1],
        "Abrego":                       [54003, 0.3, 0.2, 0.07, 0.04],
        "Arboledas":                    [54051, 0.3, 0.25, 0.08, 0.04],
        "Bochalema":                    [54099, 0.35, 0.25, 0.13, 0.06],
        "Bucarasica":                   [54109, 0.3, 0.25, 0.09, 0.04],
        "Cáchira":                      [54128, 0.25, 0.25, 0.07, 0.04],
        "Cácota":                       [54125, 0.3, 0.25, 0.1, 0.05],
        "Chinácota":                    [54172, 0.35, 0.3, 0.16, 0.07],
        "Chitagá":                      [54174, 0.3, 0.3, 0.11, 0.05],
        "Convención":                   [54206, 0.2, 0.15, 0.04, 0.02],
        "Cucutilla":                    [54223, 0.3, 0.25, 0.08, 0.04],
        "Durania":                      [54239, 0.35, 0.25, 0.14, 0.06],
        "El carmen":                    [54245, 0.15, 0.1, 0.04, 0.02],
        "El tarra":                     [54250, 0.2, 0.15, 0.05, 0.03],
        "El zulia":                     [54261, 0.35, 0.25, 0.22, 0.09],
        "Gramalote":                    [54313, 0.3, 0.25, 0.11, 0.05],
        "Hacarí":                       [54344, 0.25, 0.2, 0.06, 0.03],
        "Herrán":                       [54347, 0.35, 0.3, 0.19, 0.08],
        "La esperanza":                 [54385, 0.2, 0.2, 0.05, 0.03],
        "La playa":                     [54398, 0.2, 0.15, 0.06, 0.03],
        "Labateca":                     [54377, 0.35, 0.3, 0.14, 0.06],
        "Los patios":                   [54405, 0.35, 0.3, 0.22, 0.09],
        "Lourdes":                      [54418, 0.3, 0.25, 0.11, 0.05],
        "Mutiscua":                     [54480, 0.3, 0.25, 0.08, 0.04],
        "Ocaña":                        [54498, 0.2, 0.15, 0.08, 0.03],
        "Pamplona":                     [54518, 0.3, 0.25, 0.1, 0.05],
        "Pamplonita":                   [54520, 0.35, 0.25, 0.13, 0.06],
        "Puerto santander":             [54553, 0.35, 0.25, 0.09, 0.04],
        "Ragonvalia":                   [54599, 0.35, 0.3, 0.2, 0.09],
        "Salazar":                      [54660, 0.3, 0.25, 0.09, 0.04],
        "San calixto":                  [54670, 0.2, 0.15, 0.05, 0.03],
        "San cayetano":                 [54673, 0.35, 0.3, 0.19, 0.08],
        "Santiago":                     [54680, 0.3, 0.25, 0.14, 0.06],
        "Sardinata":                    [54720, 0.3, 0.25, 0.15, 0.06],
        "Silos":                        [54743, 0.25, 0.25, 0.07, 0.03],
        "Teorama":                      [54800, 0.2, 0.15, 0.04, 0.02],
        "Tibú":                         [54810, 0.2, 0.2, 0.11, 0.04],
        "Toledo":                       [54820, 0.35, 0.3, 0.24, 0.1],
        "Villa caro":                   [54871, 0.3, 0.25, 0.07, 0.04],
        "Villa del rosario":            [54874, 0.35, 0.3, 0.25, 0.1]
    },
    'Pereira': {
        "Risaralda":                    [66001, 0.25, 0.25, 0.2, 0.1],
        "Apía":                         [66045, 0.3, 0.3, 0.2, 0.1],
        "Balboa":                       [66075, 0.25, 0.3, 0.2, 0.1],
        "Belén de Umbría":              [66088, 0.25, 0.3, 0.2, 0.1],
        "Dos Quebradas":                [66170, 0.25, 0.25, 0.2, 0.1],
        "Guática":                      [66318, 0.25, 0.3, 0.2, 0.1],
        "La Celia":                     [66383, 0.3, 0.3, 0.2, 0.1],
        "La Virginia":                  [66400, 0.25, 0.3, 0.2, 0.1],
        "Marsella":                     [66440, 0.25, 0.25, 0.2, 0.1],
        "Mistrató":                     [66456, 0.3, 0.3, 0.2, 0.1],
        "Pueblo Rico":                  [66572, 0.3, 0.3, 0.2, 0.1],
        "Quinchía":                     [66594, 0.25, 0.3, 0.2, 0.1],
        "Santa rosa de cabal":          [66682, 0.25, 0.25, 0.18, 0.09],
        "Santuario":                    [66687, 0.3, 0.3, 0.2, 0.1]
    },
    'Putumayo': {
        "Mocoa":                        [86001, 0.3, 0.25, 0.2, 0.1],
        "Colón":                        [86219, 0.25, 0.25, 0.13, 0.08],
        "Orito":                        [86320, 0.3, 0.25, 0.08, 0.05],
        "Puerto Asís":                  [86568, 0.05, 0.15, 0.04, 0.02],
        "Puerto Caicedo":               [86569, 0.15, 0.2, 0.04, 0.02],
        "Puerto Guzmán":                [86571, 0.05, 0.15, 0.04, 0.02],
        "Puerto Leguízamo":             [86573, 0.05, 0.05, 0.04, 0.02],
        "San Francisco":                [86755, 0.3, 0.25, 0.16, 0.1],
        "San Miguel":                   [86757, 0.15, 0.2, 0.04, 0.02],
        "Santiago":                     [86760, 0.3, 0.25, 0.17, 0.1],
        "Sibundoy":                     [86749, 0.25, 0.25, 0.14, 0.08],
        "Valle del Guamuez":            [86865, 0.15, 0.2, 0.04, 0.02],
        "Villagarzón":                  [86885, 0.3, 0.25, 0.08, 0.05]
    },
    'Quíndio': {
        "Armenia":                      [63001, 0.25, 0.25, 0.2, 0.1],
        "Buenavista":                   [63111, 0.25, 0.2, 0.19, 0.09],
        "Calarcá":                      [63130, 0.25, 0.25, 0.2, 0.1],
        "Circasia":                     [63190, 0.25, 0.25, 0.2, 0.11],
        "Córdoba":                      [63212, 0.25, 0.2, 0.2, 0.1],
        "Filandia":                     [63272, 0.25, 0.25, 0.2, 0.11],
        "Génova":                       [63302, 0.25, 0.2, 0.2, 0.09],
        "La Tebaida":                   [63401, 0.25, 0.25, 0.18, 0.09],
        "Montenegro":                   [63470, 0.25, 0.25, 0.19, 0.1],
        "Pijáo":                        [63548, 0.25, 0.2, 0.2, 0.1],
        "Quimbaya":                     [63594, 0.25, 0.25, 0.2, 0.1],
        "Salento":                      [63690, 0.25, 0.25, 0.18, 0.09]
    },
    'San Ándres y Providencia': {
        "San Andrés":                   [88001, 0.1, 0.1, 0.05, 0.03],
        "Providencia y santa catalina": [88564, 0.1, 0.1, 0.05, 0.03]
    },
    'Santander': {
        "Bucaramanga":                  [68001, 0.25, 0.25, 0.15, 0.09],
        "Aguada":                       [68013, 0.15, 0.2, 0.17, 0.09],
        "Albania":                      [68020, 0.15, 0.15, 0.09, 0.06],
        "Aratoca":                      [68051, 0.25, 0.25, 0.11, 0.07],
        "Barbosa":                      [68077, 0.15, 0.2, 0.09, 0.06],
        "Barichara":                    [68079, 0.2, 0.25, 0.13, 0.08],
        "Barrancabermeja":              [68081, 0.15, 0.15, 0.06, 0.04],
        "Betulia":                      [68092, 0.2, 0.2, 0.13, 0.09],
        "Bolívar":                      [68101, 0.15, 0.15, 0.07, 0.04],
        "Cabrera":                      [68121, 0.2, 0.2, 0.13, 0.08],
        "California":                   [68132, 0.25, 0.25, 0.09, 0.05],
        "Capitanejo":                   [68147, 0.25, 0.25, 0.11, 0.06],
        "Carcasi":                      [68152, 0.25, 0.25, 0.12, 0.06],
        "Cepitá":                       [68160, 0.25, 0.25, 0.11, 0.06],
        "Cerrito":                      [68162, 0.25, 0.25, 0.11, 0.06],
        "Charalá":                      [68167, 0.2, 0.25, 0.08, 0.05],
        "Charta":                       [68169, 0.25, 0.25, 0.09, 0.06],
        "Chima":                        [68176, 0.15, 0.2, 0.2, 0.1],
        "Chipatá":                      [68179, 0.15, 0.2, 0.11, 0.07],
        "Cimitarra":                    [68190, 0.15, 0.15, 0.06, 0.04],
        "Concepción":                   [68207, 0.25, 0.25, 0.12, 0.06],
        "Confines":                     [68209, 0.2, 0.2, 0.09, 0.06],
        "Contratación":                 [68211, 0.15, 0.2, 0.2, 0.1],
        "Coromoro":                     [68217, 0.2, 0.25, 0.09, 0.06],
        "Curití":                       [68229, 0.2, 0.25, 0.1, 0.06],
        "El Carmen de Chucurí":         [68235, 0.15, 0.15, 0.17, 0.08],
        "El Florian":                   [68271, 0.15, 0.15, 0.12, 0.07],
        "El Guacamayo":                 [68245, 0.15, 0.2, 0.18, 0.1],
        "El Peñón":                     [68250, 0.15, 0.15, 0.16, 0.07],
        "El Playón":                    [68255, 0.25, 0.25, 0.14, 0.07],
        "Encino":                       [68264, 0.2, 0.25, 0.09, 0.05],
        "Enciso":                       [68266, 0.25, 0.25, 0.1, 0.05],
        "Floridablanca":                [68276, 0.25, 0.25, 0.13, 0.08],
        "Galán":                        [68296, 0.15, 0.2, 0.2, 0.1],
        "Gámbita":                      [68298, 0.2, 0.2, 0.07, 0.05],
        "Girón":                        [68307, 0.2, 0.25, 0.18, 0.1],
        "Goepsa":                       [68327, 0.15, 0.2, 0.09, 0.06],
        "Guaca":                        [68318, 0.25, 0.25, 0.09, 0.05],
        "Guadalupe":                    [68320, 0.15, 0.2, 0.16, 0.09],
        "Guapotá":                      [68322, 0.15, 0.2, 0.12, 0.08],
        "Guavatá":                      [68324, 0.15, 0.15, 0.1, 0.06],
        "Hato":                         [68344, 0.15, 0.2, 0.21, 0.1],
        "Jesús maria":                  [68368, 0.15, 0.15, 0.1, 0.06],
        "Jordán":                       [68370, 0.2, 0.25, 0.1, 0.07],
        "La belleza":                   [68377, 0.15, 0.15, 0.16, 0.07],
        "La paz":                       [68397, 0.15, 0.15, 0.14, 0.09],
        "Landázuri":                    [68385, 0.15, 0.15, 0.1, 0.06],
        "Lebrija":                      [68406, 0.25, 0.2, 0.13, 0.09],
        "Los santos":                   [68418, 0.2, 0.25, 0.11, 0.08],
        "Macaravita":                   [68425, 0.25, 0.25, 0.12, 0.06],
        "Málaga":                       [68432, 0.25, 0.25, 0.09, 0.05],
        "Matanza":                      [68444, 0.25, 0.25, 0.1, 0.06],
        "Mogotes":                      [68464, 0.25, 0.25, 0.1, 0.06],
        "Molagavita":                   [68468, 0.25, 0.25, 0.1, 0.06],
        "Ocamonte":                     [68498, 0.2, 0.25, 0.08, 0.05],
        "Oiba":                         [68500, 0.2, 0.2, 0.09, 0.06],
        "Onzága":                       [68502, 0.25, 0.25, 0.13, 0.07],
        "Palmar":                       [68522, 0.15, 0.2, 0.15, 0.09],
        "Palmas del socorro":           [68524, 0.15, 0.2, 0.11, 0.08],
        "Páramo":                       [68533, 0.2, 0.25, 0.09, 0.06],
        "Piedecuesta":                  [68547, 0.25, 0.25, 0.11, 0.07],
        "Pinchote":                     [68549, 0.2, 0.25, 0.09, 0.06],
        "Puente nacional":              [68572, 0.15, 0.2, 0.08, 0.05],
        "Puerto parra":                 [68573, 0.15, 0.15, 0.05, 0.04],
        "Puerto wilches":               [68575, 0.15, 0.15, 0.04, 0.03],
        "Rionegro":                     [68615, 0.2, 0.2, 0.07, 0.04],
        "Sabana de torres":             [68655, 0.2, 0.15, 0.06, 0.04],
        "San Andrés":                   [68669, 0.25, 0.25, 0.09, 0.05],
        "San benito":                   [68673, 0.15, 0.2, 0.12, 0.07],
        "San gil":                      [68679, 0.2, 0.25, 0.09, 0.06],
        "San Joaquín":                  [68682, 0.25, 0.25, 0.13, 0.07],
        "San José de miranda":          [68684, 0.25, 0.25, 0.1, 0.05],
        "San miguel":                   [68686, 0.25, 0.25, 0.11, 0.06],
        "San Vicente de Chucurí":       [68689, 0.15, 0.15, 0.16, 0.08],
        "Santa Bárbara":                [68705, 0.25, 0.25, 0.09, 0.05],
        "Santa Helena del Opón":        [68720, 0.15, 0.15, 0.18, 0.1],
        "Simacota":                     [68745, 0.15, 0.15, 0.09, 0.06],
        "Socorro":                      [68755, 0.2, 0.2, 0.11, 0.07],
        "Suaita":                       [68770, 0.15, 0.2, 0.09, 0.06],
        "Sucre":                        [68773, 0.15, 0.15, 0.15, 0.07],
        "Suratá":                       [68780, 0.25, 0.25, 0.09, 0.05],
        "Tona":                         [68820, 0.25, 0.25, 0.09, 0.05],
        "Valle San José":               [68855, 0.2, 0.25, 0.08, 0.06],
        "Vélez":                        [68861, 0.15, 0.15, 0.15, 0.08],
        "Vetas":                        [68867, 0.25, 0.25, 0.09, 0.05],
        "Villanueva":                   [68872, 0.2, 0.25, 0.11, 0.07],
        "Zapatoca":                     [68895, 0.2, 0.2, 0.2, 0.1]
    },
    'Sucre': {
        'Sincelejo':            [70001, 0.10, 0.15, 0.07, 0.04],
        'Buenavista':           [70111, 0.10, 0.15, 0.04, 0.03],
        'Caimito':              [70124, 0.15, 0.15, 0.04, 0.03],
        'Chalán':               [70230, 0.10, 0.15, 0.08, 0.04],
        'Colosó':               [70204, 0.10, 0.15, 0.07, 0.04],
        'Corozal':              [70215, 0.10, 0.15, 0.05, 0.04],
        'El Roble':             [70233, 0.10, 0.15, 0.04, 0.03],
        'Galeras':              [70235, 0.10, 0.15, 0.04, 0.03],
        'Guaranda':             [70265, 0.15, 0.15, 0.06, 0.05],
        'La Unión':             [70400, 0.15, 0.15, 0.05, 0.04],
        'Los Palmitos':         [70418, 0.10, 0.15, 0.05, 0.04],
        'Majagual':             [70429, 0.15, 0.15, 0.04, 0.04],
        'Morroa':               [70473, 0.10, 0.15, 0.07, 0.04],
        'Ovejas':               [70508, 0.10, 0.15, 0.06, 0.04],
        'Palmito':              [70523, 0.10, 0.15, 0.05, 0.04],
        'Sampués':              [70670, 0.10, 0.15, 0.06, 0.04],
        'San Benito Abad':      [70678, 0.10, 0.15, 0.04, 0.03],
        'San Juan de Betulia':  [70702, 0.10, 0.15, 0.05, 0.03],
        'San Marcos':           [70708, 0.15, 0.15, 0.04, 0.04],
        'San Onofre':           [70713, 0.10, 0.15, 0.04, 0.03],
        'San Pedro':            [70717, 0.10, 0.15, 0.04, 0.03],
        'Sincé':                [70742, 0.10, 0.15, 0.04, 0.03],
        'Sucre':                [70771, 0.10, 0.15, 0.04, 0.03],
        'Tolú':                 [70820, 0.10, 0.15, 0.04, 0.03],
        'Toluviejo':            [70823, 0.10, 0.15, 0.06, 0.04]
    },
    'Tólima': {
        "Ibagué":               [73001, 0.2, 0.2, 0.15, 0.08],
        "Alpujarra":            [73024, 0.25, 0.25, 0.14, 0.07],
        "Alvarado":             [73026, 0.2, 0.2, 0.13, 0.07],
        "Ambalema":             [73030, 0.2, 0.2, 0.1, 0.06],
        "Anzoátegui":           [73043, 0.2, 0.2, 0.13, 0.08],
        "Armero":               [73055, 0.2, 0.2, 0.1, 0.06],
        "Ataco":                [73067, 0.25, 0.2, 0.07, 0.04],
        "Cajamarca":            [73124, 0.2, 0.2, 0.14, 0.08],
        "Carmen Apicalá":       [73148, 0.25, 0.2, 0.11, 0.05],
        "Casabianca":           [73152, 0.2, 0.2, 0.16, 0.08],
        "Chaparral":            [73168, 0.25, 0.2, 0.08, 0.05],
        "Coello":               [73200, 0.2, 0.2, 0.11, 0.06],
        "Coyaima":              [73217, 0.25, 0.2, 0.09, 0.05],
        "Cunday":               [73226, 0.25, 0.2, 0.09, 0.05],
        "Dolores":              [73236, 0.25, 0.25, 0.12, 0.06],
        "Espinal":              [73268, 0.25, 0.2, 0.13, 0.06],
        "Falán":                [73270, 0.2, 0.2, 0.12, 0.07],
        "Flandes":              [73275, 0.2, 0.2, 0.11, 0.06],
        "Fresno":               [73283, 0.2, 0.2, 0.14, 0.09],
        "Guamo":                [73319, 0.25, 0.2, 0.11, 0.06],
        "Hervéo":               [73347, 0.2, 0.2, 0.16, 0.08],
        "Honda":                [73349, 0.2, 0.2, 0.1, 0.06],
        "Icononzo":             [73352, 0.2, 0.2, 0.08, 0.05],
        "Lérida":               [73408, 0.2, 0.2, 0.11, 0.06],
        "Líbano":               [73411, 0.2, 0.2, 0.12, 0.07],
        "Mariquita":            [73443, 0.2, 0.2, 0.11, 0.07],
        "Melgar":               [73449, 0.2, 0.2, 0.09, 0.05],
        "Murillo":              [73461, 0.2, 0.2, 0.15, 0.08],
        "Natagaima":            [73483, 0.25, 0.25, 0.11, 0.06],
        "Ortega":               [73504, 0.25, 0.2, 0.08, 0.05],
        "Palocabildo":          [73520, 0.2, 0.2, 0.13, 0.08],
        "Piedras":              [73547, 0.2, 0.2, 0.14, 0.07],
        "Planadas":             [73555, 0.25, 0.2, 0.06, 0.04],
        "Prado":                [73563, 0.25, 0.2, 0.13, 0.06],
        "Purificación":         [73585, 0.25, 0.2, 0.14, 0.06],
        "Rioblanco":            [73616, 0.25, 0.2, 0.07, 0.04],
        "Roncesvalles":         [73622, 0.25, 0.2, 0.15, 0.08],
        "Rovira":               [73624, 0.2, 0.2, 0.12, 0.07],
        "Saldaña":              [73671, 0.25, 0.2, 0.11, 0.06],
        "San antonio":          [73675, 0.25, 0.2, 0.1, 0.06],
        "San luis":             [73678, 0.25, 0.2, 0.1, 0.06],
        "Santa isabel":         [73686, 0.2, 0.2, 0.13, 0.08],
        "Suárez":               [73770, 0.25, 0.2, 0.13, 0.06],
        "Valle de san juan":    [73854, 0.25, 0.2, 0.1, 0.06],
        "Venadillo":            [73861, 0.2, 0.2, 0.11, 0.07],
        "Villahermosa":         [73870, 0.2, 0.2, 0.15, 0.08],
        "Villarrica":           [73873, 0.25, 0.2, 0.09, 0.05]
    },
    'Valle del Cauca': {
        "Cali":                 [76001, 0.25, 0.25, 0.15, 0.09],
        "Alcalá":               [76020, 0.25, 0.25, 0.16, 0.1],
        "Andalucía":            [76036, 0.25, 0.25, 0.14, 0.09],
        "Ansermanuevo":         [76041, 0.25, 0.3, 0.16, 0.1],
        "Argelia":              [76054, 0.3, 0.3, 0.16, 0.1],
        "Bolívar":              [76100, 0.3, 0.3, 0.16, 0.1],
        "Buenaventura":         [76109, 0.4, 0.35, 0.13, 0.08],
        "Buga":                 [76111, 0.25, 0.2, 0.11, 0.07],
        "Bugalagrande":         [76113, 0.25, 0.25, 0.13, 0.08],
        "Caicedonia":           [76122, 0.25, 0.2, 0.14, 0.08],
        "Calima":               [76126, 0.3, 0.3, 0.1, 0.07],
        "Candelaria":           [76130, 0.25, 0.2, 0.1, 0.07],
        "Cartago":              [76147, 0.25, 0.25, 0.16, 0.1],
        "Dagua":                [76233, 0.25, 0.25, 0.09, 0.06],
        "El Águila":            [76243, 0.3, 0.3, 0.16, 0.1],
        "El Cairo":             [76246, 0.3, 0.3, 0.16, 0.1],
        "El Cerrito":           [76248, 0.25, 0.2, 0.11, 0.07],
        "El Dovio":             [76250, 0.3, 0.3, 0.18, 0.1],
        "Florida":              [76275, 0.25, 0.2, 0.1, 0.06],
        "Ginebra":              [76306, 0.25, 0.2, 0.11, 0.07],
        "Guacarí":              [76318, 0.25, 0.25, 0.12, 0.08],
        "Jamundí":              [76364, 0.25, 0.25, 0.16, 0.1],
        "La Cumbre":            [76377, 0.25, 0.25, 0.11, 0.08],
        "La Unión":             [76400, 0.25, 0.25, 0.16, 0.13],
        "La Victoria":          [76403, 0.25, 0.25, 0.15, 0.1],
        "Obando":               [76497, 0.25, 0.25, 0.16, 0.1],
        "Palmira":              [76520, 0.25, 0.2, 0.12, 0.07],
        "Pradera":              [76563, 0.25, 0.2, 0.12, 0.06],
        "Restrepo":             [76606, 0.25, 0.25, 0.11, 0.08],
        "Riofrío":              [76616, 0.25, 0.25, 0.16, 0.1],
        "Roldanillo":           [76622, 0.25, 0.25, 0.16, 0.1],
        "San pedro":            [76670, 0.25, 0.25, 0.12, 0.08],
        "Sevilla":              [76736, 0.25, 0.2, 0.13, 0.08],
        "Toro":                 [76823, 0.25, 0.25, 0.16, 0.14],
        "Trujillo":             [76828, 0.25, 0.25, 0.15, 0.1],
        "Tuluá":                [76834, 0.25, 0.2, 0.12, 0.07],
        "Ulloa":                [76845, 0.25, 0.25, 0.16, 0.1],
        "Versalles":            [76863, 0.3, 0.3, 0.16, 0.1],
        "Vijes":                [76869, 0.25, 0.25, 0.16, 0.1],
        "Yotocó":               [76890, 0.25, 0.25, 0.16, 0.1],
        "Yumbo":                [76892, 0.25, 0.25, 0.16, 0.1],
        "Zarzal":               [76895, 0.25, 0.25, 0.14, 0.1]
    },
    'Vaupes': {
        "Mitú":                 [97001, 0.05, 0.05, 0.04, 0.02],
        "Carurú":               [97161, 0.05, 0.05, 0.04, 0.02],
        "Pacoa":                [97511, 0.05, 0.05, 0.04, 0.02],
        "Papunahua":            [97777, 0.05, 0.05, 0.04, 0.02],
        "Taraira":              [97666, 0.05, 0.05, 0.04, 0.02],
        "Yavarate":             [97889, 0.05, 0.05, 0.04, 0.02]
    },
    'Vichada': {
        "Puerto Carreño":       [99001, 0.05, 0.05, 0.04, 0.02],
        "Cumaribo":             [99773, 0.05, 0.05, 0.04, 0.02],
        "La Primavera":         [99524, 0.05, 0.05, 0.04, 0.02],
        "Santa Rosalía":        [99624, 0.05, 0.05, 0.04, 0.02]
    }
}

sistemaEstructural = {
    'Sistema de muros de carga': {
        'Paneles de cortante de madera': {
            'Paneles de cortante de madera': {
                'vertical': 'Muros ligeros de madera laminada', 'R': 3, 'O': 2.5,
                'amenaza': {'Alta': ['si', 6], 'Intermedia': ['si', 9], 'Baja': ['si', 12]}
            }
        },
        'Muros estructurales': {
            'Muros de concreto con capacidad especial de disipación de energía (DES)': {
                'vertical': 'El mismo', 'R': 5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 50], 'Intermedia': ['si', 'ilimitado'], 'Baja': ['si', 'ilimitado']}
            },
            'Muros de concreto con capacidad moderada de disipación de energía (DMO)': {
                'vertical': 'El mismo', 'R': 4, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 50], 'Baja': ['si', 'ilimitado']}
            },
            'Muros de concreto con capacidad mínima de disipación de energía (DMI)': {
                'vertical': 'El mismo', 'R': 2.5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 50]}
            },
            'Muros de mampostería reforzada de bloque de perforación vertical (DES) con todas las celdas rellenas': {
                'vertical': 'El mismo', 'R': 3.5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 50], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de mampostería reforzada de bloque de perforación vertical (DMO)': {
                'vertical': 'El mismo', 'R': 2.5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 50], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de mampostería parcialmente reforzada de bloque de perforación vertical': {
                'vertical': 'El mismo', 'R': 2, 'O': 2.5,
                'amenaza': {'Alta': ['si', 6], 'Intermedia': ['si', 12], 'Baja': ['si', 18]}
            },
            'Muros de mampostería confinada': {
                'vertical': 'El mismo', 'R': 2, 'O': 2.5,
                'amenaza': {'Alta': ['si', 6], 'Intermedia': ['si', 12], 'Baja': ['si', 18]}
            },
            'Muros de mampostería de cavidad reforzada': {
                'vertical': 'El mismo', 'R': 4, 'O': 2.5,
                'amenaza': {'Alta': ['si', 45], 'Intermedia': ['si', 60], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de mampostería no reforzada (no tiene capacidad de disipación de energía)': {
                'vertical': 'El mismo', 'R': 1, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 6]}
            }
        },
        'Pórticos con diagonales (las diagonales llevan la fuerza vertical)': {
            'Pórticos de acero estructural con diagonales concéntricas (DES)': {
                'vertical': 'El mismo', 'R': 5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 24], 'Intermedia': ['si', 30], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos con diagonales de concreto con capacidad moderada de disipación de energía (DMO)': {
                'vertical': 'El mismo', 'R': 3.5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 30], 'Baja': ['si', 30]}
            },
            'Pórticos de madera con diagonales': {
                'vertical': 'El mismo', 'R': 2, 'O': 2.5,
                'amenaza': {'Alta': ['si', 12], 'Intermedia': ['si', 15], 'Baja': ['si', 18]}
            }
        }
    },
    'Sistema combinado': {
        'Pórticos de acero con diagonales excéntricas': {
            'Pórticos de acero con diagonales excéntricas si las conexiones con las columnas por fuera del vínculo son resistentes a momento': {
                'vertical': 'Pórticos de acero resistentes a momentos con capacidad mínima de disipación de energía (DMI)', 'R': 7, 'O': 2,
                'amenaza': {'Alta': ['si', 45], 'Intermedia': ['si', 60], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de acero con diagonales excéntricas si las conexiones con las columnas por fuera del vínculo no son resistentes a momento': {
                'vertical': 'Pórticos de acero resistentes a momentos con capacidad mínima de disipación de energía (DMI)', 'R': 6, 'O': 2,
                'amenaza': {'Alta': ['si', 45], 'Intermedia': ['si', 60], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de acero con diagonales excéntricas si el vínculo no se conecta a la columna': {
                'vertical': 'Pórticos de acero no resistentes a momentos', 'R': 6, 'O': 2,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de acero con diagonales excéntricas si el vínculo tiene conexión resistente a momento con la columna': {
                'vertical': 'Pórticos de acero resistenes a momentos con capacidad mínima de disipación de energía (DMI)', 'R': 5, 'O': 2,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            }
        },
        'Muros estructurales': {
            'Muros de concreto con capacidad especial de disipación de energía (DES)': {
                'vertical': 'Pórticos de concreto con capacidad especial de disipación de energía (DES)', 'R': 7, 'O': 2.5,
                'amenaza': {'Alta': ['si', 72], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de concreto con capacidad moderada de disipación de energía (DMO)': {
                'vertical': 'Pórticos de concreto con capacidad moderada de disipación de energía (DMO)', 'R': 5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 72], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de concreto con capacidad moderada de disipación de energía (DMO) 2': {
                'vertical': 'Pórticos losa-columna con capacidad moderada de disipación de energía (DMO)', 'R': 3.5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 18], 'Baja': ['si', 27]}
            },
            'Muros de concreto con capacidad mínima de disipación de energía (DMI)': {
                'vertical': 'Pórticos de concreto con capacidad mínima de disipación de energía (DMI)', 'R': 2.5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 72]}
            },
            'Muros de concreto con capacidad mínima de disipación de energía (DMI) 2': {
                'vertical': 'Pórticos losa-columna con capacidad mínima de disipación de energía (DMI)', 'R': 2, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 18]}
            },
            'Muros de mampostería reforzada de bloque de perforación vertical (DES) con todas las celdas rellenas': {
                'vertical': 'Pórticos de concreto con capacidad especial de disipación de energía (DES)', 'R': 4.5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 45]}
            },
            'Muros de mampostería reforzada de bloque de perforación vertical (DMO)': {
                'vertical': 'Pórticos de concreto con capacidad especial de disipación de energía (DES)', 'R': 3.5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 45]}
            },
            'Muros de mampostería reforzada de bloque de perforación vertical (DMO) 2': {
                'vertical': 'Pórticos de concreto con capacidad moderada de disipación de energía (DMO)', 'R': 2.5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 30], 'Baja': ['si', 45]}
            },
            'Muros de mampostería confinada (DMO)': {
                'vertical': 'Pórticos de concreto con capacidad moderada de disipación de energía (DMO)', 'R': 2, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 18], 'Baja': ['si', 21]}
            },
            'Muros de mampostería confinada (DMO) 2': {
                'vertical': 'Pórticos de concreto con capacidad mínima de disipación de energía (DMI)', 'R': 2, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 18]}
            },
            'Muros de mampostería de cavidad reforzada (DES)': {
                'vertical': 'Pórticos de concreto con capacidad moderada de disipación de energía (DMO)', 'R': 4, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 30], 'Baja': ['si', 45]}
            },
            'Muros de mampostería de cavidad reforzada (DES) 2': {
                'vertical': 'Pórticos de concreto con capacidad mínima de disipación de energía (DMI)', 'R': 2, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 45]}
            },
            'Muros de cortante con placa de acero (DES)': {
                'vertical': 'Pórticos de acero resistente o no a momentos', 'R': 7, 'O': 2,
                'amenaza': {'Alta': ['si', 50], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de cortante compuestos con placa de acero y concreto': {
                'vertical': 'Pórticos de acero resistente o no a momentos', 'R': 6.5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 50], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de concreto reforzada (DES) mixtos con elementos de acero': {
                'vertical': 'Pórticos de acero resistente o no a momentos', 'R': 6, 'O': 2.5,
                'amenaza': {'Alta': ['si', 50], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de concreto reforzado (DMO) mixtos con elementos de acero': {
                'vertical': 'Pórticos de acero resistente o no a momentos', 'R': 5.5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 'ilimitada']}
            },
            'Muros de concreto reforzado (DMI) mixtos con elementos de acero': {
                'vertical': 'Pórticos de acero resistente o no a momentos', 'R': 5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 45]}
            }
        },
        'Pórticos con diagonales concéntricas': {
            'Pórticos de acero con diagonales concéntricas (DES)': {
                'vertical': 'Pórticos de acero no resistentes a momentos', 'R': 5, 'O': 2.5,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 60]}
            },
            'Pórticos de acero con diagonales concéntricas (DMI)': {
                'vertical': 'Pórticos de acero no resistentes a momentos', 'R': 4, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 10], 'Baja': ['si', 60]}
            },
            'Pórticos mixtos con diagonales concéntricas (DES)': {
                'vertical': 'Pórticos de acero resistentes o no a momentos', 'R': 5, 'O': 2,
                'amenaza': {'Alta': ['si', 50], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos mixtos con diagonales concéntricas (DMI)': {
                'vertical': 'Pórticos de acero resistentes o no a momentos', 'R': 3, 'O': 2,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de acero con diagonales concéntricas restringidas a pandeo, con conexiones viga-columna resistentes a momento': {
                'vertical': 'Pórticos de acero no resistentes a momentos', 'R': 7, 'O': 2.5,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de acero con diagonales concéntricas restringidas a pandeo, con conexiones viga-columna no resistentes a momento': {
                'vertical': 'Pórticos de acero no resistentes a momentos', 'R': 6, 'O': 2.5,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de concreto con diagonales concéntricas con capacidad moderada de disipación de energía (DMO)': {
                'vertical': 'Pórticos de concreto con capacidad moderada de disipación de energía (DMO)', 'R': 3.5, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 24], 'Baja': ['si', 30]}
            }
        }
    },
    'Sistema de pórtico resistente a momentos': {
        'Pórticos resistentes a momentos con capacidad especial de disipación de energía (DES)': {
            'De concreto (DES)': {
                'vertical': 'El mismo', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'De acero (DES)': {
                'vertical': 'El mismo', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Mixtos': {
                'vertical': 'Pórticos de acero o mixtos resistentes o no a momentos', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'De acero con cerchas dúctiles (DES)': {
                'vertical': 'Pórticos de acero o mixtos resistentes o no a momentos', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
        },
        'Pórticos resistentes a momentos con capacidad moderada de disipación de energía (DMO)': {
            'De concreto (DMO)': {
                'vertical': 'El mismo', 'R': 5, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'De acero (DMO)': {
                'vertical': 'El mismo', 'R': 5, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Mixtos con conexiones rígidas (DMO)': {
                'vertical': 'Pórticos de acero o mixtos resistentes o no a momentos', 'R': 5, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
        },
        'Pórticos resistentes a momentos con capacidad mínima de disipación de energía (DMI)': {
            'De concreto (DMI)': {
                'vertical': 'El mismo', 'R': 2.5, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 'ilimitada']}
            },
            'De acero (DMI)': {
                'vertical': 'El mismo', 'R': 3, 'O': 2.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 'ilimitada']}
            },
            'Mixtos con conexiones totalmente restringidas a momento (DMI)': {
                'vertical': 'Pórticos de acero o mixtos resistentes o no a momentos', 'R': 3, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 'ilimitada']}
            },
            'Mixtos con conexiones parcialmente restringidas a momento': {
                'vertical': 'Pórticos de acero o mixtos resistentes o no a momentos', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 30], 'Baja': ['si', 50]}
            },
            'De acero con cerchas no dúctiles': {
                'vertical': 'El mismo', 'R': 1.5, 'O': 1.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 12]}
            },
            'De acero con perfiles de lámina doblada en frío y perfiles tubulares estructurales PTE que no cumplen los requisitos de F.2.2.4 para perfiles no esbeltos': {
                'vertical': 'El mismo', 'R': 1.5, 'O': 1.5,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 'ilimitada']}
            },
            'Otras estructuras de celosía tales como vigas y cerchas': {
                'R': 0, 'O': 0, 'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['no', 'no']}
            },
        },
        'Pórticos losa-columna (incluye reticular celulado)': {
            'De concreto con capacidad moderada de disipación de energía (DMO)': {
                'vertical': 'El mismo', 'R': 2.5, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 15], 'Baja': ['si', 21]}
            },
            'De concreto con capacidad mínima de disipación de energía (DMI)': {
                'vertical': 'El mismo', 'R': 1.5, 'O': 3,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['no', 'no'], 'Baja': ['si', 15]}
            },
        },
        'Estructuras de péndulo invertido': {
            'Pórticos de acero resistentes a momento con capacidad especial de disipación de energía (DES)': {
                'vertical': 'El mismo', 'R': 2.5, 'O': 2,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de concreto con capacidad especial de disipación de energía (DES)': {
                'vertical': 'El mismo', 'R': 2.5, 'O': 2,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'Pórticos de acero resistentes a momento con capacidad moderada de disipación de energía (DMO)': {
                'vertical': 'El mismo', 'R': 1.5, 'O': 2,
                'amenaza': {'Alta': ['no', 'no'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
        }
    },
    'Sistema dual': {
        'Muros estructurales': {
            'a': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'b': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'c': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'd': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'e': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'f': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'g': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'h': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'i': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'j': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'k': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'l': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'm': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'n': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'o': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
        },
        'Pórticos de acero con diagonales excéntricas': {
            'a': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'b': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'c': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'd': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            }
        },
        'Pórticos con diagonales concéntricas': {
            'a': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'b': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'c': {
                'vertical': '', 'R': 7, 'O': 3,
                'amenaza': {'Alta': ['si', 'ilimitada'], 'Intermedia': ['si', 'ilimitada'], 'Baja': ['si', 'ilimitada']}
            },
            'd': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'e': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'f': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'g': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            },
            'h': {
                'vertical': '', 'R': 6, 'O': 3,
                'amenaza': {'Alta': ['si', 30], 'Intermedia': ['si', 45], 'Baja': ['si', 'ilimitada']}
            }
        }
    }
}

Fat = {
    'A': {0.1: 0.8, 0.2: 0.8, 0.3: 0.8, 0.4: 0.8, 0.5: 0.8},
    'B': {0.1: 1.0, 0.2: 1.0, 0.3: 1.0, 0.4: 1.0, 0.5: 1.0},
    'C': {0.1: 1.2, 0.2: 1.2, 0.3: 1.1, 0.4: 1.0, 0.5: 1.0},
    'D': {0.1: 1.6, 0.2: 1.4, 0.3: 1.2, 0.4: 1.1, 0.5: 1.0},
    'E': {0.1: 2.5, 0.2: 1.7, 0.3: 1.2, 0.4: 0.9, 0.5: 0.9},
    'F': {0.1: 0.0, 0.2: 0.0, 0.3: 0.0, 0.4: 0.0, 0.5: 0.0}
}

Fvt = {
    'A': {0.1: 0.8, 0.2: 0.8, 0.3: 0.8, 0.4: 0.8, 0.5: 0.8},
    'B': {0.1: 1.0, 0.2: 1.0, 0.3: 1.0, 0.4: 1.0, 0.5: 1.0},
    'C': {0.1: 1.7, 0.2: 1.6, 0.3: 1.5, 0.4: 1.4, 0.5: 1.3},
    'D': {0.1: 2.4, 0.2: 2.0, 0.3: 1.8, 0.4: 1.6, 0.5: 1.5},
    'E': {0.1: 3.5, 0.2: 3.2, 0.3: 2.8, 0.4: 2.4, 0.5: 2.4},
    'F': {0.1: 0.0, 0.2: 0.0, 0.3: 0.0, 0.4: 0.0, 0.5: 0.0}
}

nervioAnalisis = {}

concretoEc = {
    'Peso normal del concreto': {
        'Origen': {
            'No se distingue el origen':                '4700*fc**(1/2)'}
    },
    'Conoce masa del concreto': {
        'Origen': {
            'Agregado grueso de origen ígneo':          'wc**(1.5)*0.047*fc**(1/2)',
            'Agregado grueso de origen metamórfico':    'wc**(1.5)*0.041*fc**(1/2)',
            'Agregado grueso de origen sedimentario':   'wc**(1.5)*0.031*fc**(1/2)',
            'No se distingue el origen':                'wc**(1.5)*0.034*fc**(1/2)',
        }
    },
    'No conoce masa del concreto': {
        'Origen': {
            'Agregado grueso de origen ígneo':          '5500*fc**(1/2)',
            'Agregado grueso de origen metamórfico':    '4700*fc**(1/2)',
            'Agregado grueso de origen sedimentario':   '3600*fc**(1/2)',
            'No se distingue el origen':                '3900*fc**(1/2)',
        }
    }
}

def Ninguna():
        pass

def crearCBox(frame, variable, font, width, function, cspan, yspan, sticky, x, y):
    ComboBox = ttk.Combobox(frame, textvariable = variable, width = width, font = font)
    ComboBox.bind('<<ComboboxSelected>>', function)
    ComboBox['state'] = 'readonly'
    ComboBox.grid(columnspan = cspan, rowspan = yspan, sticky = sticky, column = x, row = y)
    return ComboBox

def crearEntry(frame, variable, font, width, function, cspan, yspan, sticky, x, y):
        Entry = tk.Entry(frame, textvariable = variable, font = font, width = width)
        variable.set(0)
        Entry.bind('<Return>', function)
        Entry.grid(columnspan = cspan, rowspan = yspan, sticky = sticky, column = x, row = y)
        return Entry

def crearLabelVariable(frame, variable, font, cspan, sticky, x, y):
        Label = tk.Label(frame, bg = '#FFFFFF', font = font, textvariable = variable)
        Label.grid(column = x, row = y, columnspan = cspan, sticky = sticky)

def crearLabel(frame, text, font, cspan, rowspan, sticky, x, y):
        Label = tk.Label(frame, text = text, bg ='#FFFFFF', font = font)
        Label.grid(column = x, row = y, columnspan = cspan, sticky = sticky, rowspan = rowspan)

def crearButton(frame, text, command, width, sticky, x, y):
        Button = tk.Button(frame, text = text, command = command, bg = '#FFFFFF', width = width)
        Button.grid(sticky = sticky, column = x, row = y)

def crearCanvas(frame, width, height, cspan, yspan, x, y):
    Canvas = tk.Canvas(frame, bg = 'white', width = width, height = height)
    Canvas.grid(columnspan = cspan, rowspan = yspan, column = x, row = y)
    return Canvas

def main():

    listaCargas = []
    listaLongitudes = []
    listaApoyos = []
    datosTresMomentos = []
    resultadoTresMomentos = []
    listaReacciones = []
    repetirMetodo = 0

    def amenaza(Aa, Av): # ECHO
        if Aa <= 0.1 and Av <= 0.1:
            amenazaNivel.set('Baja')
            disipacion.set('Disipación mínima (DMI)')
            bwMinimo.set('c) El ancho mínimo (bw) no tiene restricción.')
            normaColumna.set('Sin restricción')
            diMenorCol.set(0)
            areaMinCol.set(0)
        elif (Aa >= 0.1 or Av >= 0.1) and (Aa <= 0.2 and Av <= 0.2):
            amenazaNivel.set('Intermedia')
            disipacion.set('Disipación moderada (DMO)')
            bwMinimo.set('c) El ancho mínimo (bw) es 20 cm (C.21.3.4.1).')
            normaColumna.set('C.21.3.5.1')
            diMenorCol.set(25)
            areaMinCol.set(625)
        elif Aa > 0.2 or Av > 0.2:
            amenazaNivel.set('Alta')
            disipacion.set('Disipación especial (DES)')
            bwMinimo.set('c) El ancho mínimo (bw) es 25 cm o 0.3*h (C.21.5.1.3).')
            notaD.set('d) El ancho bw no debe exceder el ancho del elemento de apoyo (C.21.5.1.4).')
            normaColumna.set('C.21.6.1.1')
            diMenorCol.set(30)
            areaMinCol.set(900)

    def municipios(codigo, Aav, Avv, Aev, Adv): # ECHO
        codigoMunicipio.set(codigo)
        Aa.set(str(Aav))
        Av.set(str(Avv))
        Ae.set(str(Aev))
        Ad.set(str(Adv))

    def municipioCBOX(*args): # ECHO
        municipio = cboxMunicipios.get()
        departamento = cboxDepartamentos.get()
        municipios(Colombia[departamento][municipio][0],
        Colombia[departamento][municipio][1],
        Colombia[departamento][municipio][2],
        Colombia[departamento][municipio][3],
        Colombia[departamento][municipio][4])
        amenaza(Colombia[departamento][municipio][1], Colombia[departamento][municipio][2])
        comboxSEstructural['state'] = 'readonly'
        comboxPerfilSuelo['state'] = 'readonly'
    
    def PerfilSueloCBOX(*args): # ECHO
        tipoSuelo = cboxPerfilSuelo.get()
        CAa = float(Aa.get())
        CAv = float(Av.get())
        if CAa <= 0.1:
            Fac = Fat[tipoSuelo][0.1]
        elif CAa > 0.1 and CAa < 0.2:
            Fac = (Fat[tipoSuelo][0.1]+Fat[tipoSuelo][0.2])/2
        elif CAa == 0.2:
            Fac = Fat[tipoSuelo][0.2]
        elif CAa > 0.2 and CAa < 0.3:
            Fac = (Fat[tipoSuelo][0.2]+Fat[tipoSuelo][0.3])/2
        elif CAa == 0.3:
            Fac = Fat[tipoSuelo][0.3]
        elif CAa > 0.3 and CAa < 0.4:
            Fac = (Fat[tipoSuelo][0.3]+Fat[tipoSuelo][0.4])/2
        elif CAa == 0.4:
            Fac = Fat[tipoSuelo][0.2]
        elif CAa > 0.4 and CAa < 0.5:
            Fac = (Fat[tipoSuelo][0.4]+Fat[tipoSuelo][0.5])/2
        else:
            Fac = Fat[tipoSuelo][0.5]
        if CAv <= 0.1:
            Fvc = Fvt[tipoSuelo][0.1]
        elif CAv > 0.1 and CAv < 0.2:
            Fvc = (Fvt[tipoSuelo][0.1]+Fvt[tipoSuelo][0.2])/2
        elif CAv == 0.2:
            Fvc = Fvt[tipoSuelo][0.2]
        elif CAv > 0.2 and CAv < 0.3:
            Fvc = (Fvt[tipoSuelo][0.2]+Fvt[tipoSuelo][0.3])/2
        elif CAv == 0.3:
            Fvc = Fvt[tipoSuelo][0.3]
        elif CAv > 0.3 and CAv < 0.4:
            Fvc = (Fvt[tipoSuelo][0.3]+Fvt[tipoSuelo][0.4])/2
        elif CAv == 0.4:
            Fvc = Fvt[tipoSuelo][0.2]
        elif CAv > 0.4 and CAv < 0.5:
            Fvc = (Fvt[tipoSuelo][0.4]+Fvt[tipoSuelo][0.5])/2
        else:
            Fvc = Fvt[tipoSuelo][0.5]
        Fa.set(str(round(Fac, 2)))
        Fv.set(str(round(Fvc, 2)))

    def SistemaRSCBOX(*args): # ECHO
        sistemaElegido = cboxSEstructural.get()
        subsistemaElegido = cboxSistemaRS.get()
        comboxSistemaRS2['state'] = 'readonly'
        comboxSistemaRS2['values'] = list(sistemaEstructural[sistemaElegido][subsistemaElegido].keys())

    def SistemaRSCBOX2(*args): # ECHO
        sistemaElegido = cboxSEstructural.get()
        subsistemaElegido = cboxSistemaRS.get()
        tipoElegido = cboxSistemaRS2.get()
        nivel = amenazaNivel.get()
        altura = float(entryAltura.get())
        chequeo = sistemaEstructural[sistemaElegido][subsistemaElegido][tipoElegido]['amenaza'][nivel][1]
        if chequeo == 'no':
            chequeoLabel.set('NO CUMPLE')
        elif chequeo == 'ilimitada':
            chequeoLabel.set('CUMPLE')
            R0.set(str(sistemaEstructural[sistemaElegido][subsistemaElegido][tipoElegido]['R']))
            O0.set(str(sistemaEstructural[sistemaElegido][subsistemaElegido][tipoElegido]['O']))
            resistenciaVertical.set(sistemaEstructural[sistemaElegido][subsistemaElegido][tipoElegido]['vertical'])
        else:
            if chequeo <= altura:
                chequeoLabel.set('NO CUMPLE')
            else:
                chequeoLabel.set('CUMPLE')
                R0.set(str(sistemaEstructural[sistemaElegido][subsistemaElegido][tipoElegido]['R']))
                O0.set(str(sistemaEstructural[sistemaElegido][subsistemaElegido][tipoElegido]['O']))
                resistenciaVertical.set(sistemaEstructural[sistemaElegido][subsistemaElegido][tipoElegido]['vertical'])

    def departamentoCBOX(*args): # ECHO
        departmento = cboxDepartamentos.get()
        comboxMunicipios['state'] = 'readonly'
        comboxMunicipios['values'] = list(Colombia[departmento].keys())

    def grupoUsoCBOX(*args): # ECHO
        grupoUso = cboxGUso.get()
        if grupoUso == 'IV - Edificaciones indispensables':
            coeficienteImportancia.set('1.50')
        elif grupoUso == 'III - Edificaciones de atención a la comunidad':
            coeficienteImportancia.set('1.25')
        elif grupoUso == 'II - Estructuras de ocupación especial':
            coeficienteImportancia.set('1.10')
        else:
            coeficienteImportancia.set('1.00')

    def sistemaEstructuralCBOX(*args): # ECHO
        sistemaElegido = cboxSEstructural.get()
        comboxSistemaRS['state'] = 'readonly'
        comboxSistemaRS['values'] = list(sistemaEstructural[sistemaElegido].keys())

    def calcularRCBOX(*args): # ECHO
        R0o = float(R0.get())
        ipo = float(entryIP.get())
        iao = float(entryIA.get())
        aro = float(entryAR.get())
        Rc = R0o*ipo*iao*aro
        R.set(Rc)
   
    def MConcretoCBOX(*args): # ECHO
        pesoConcreto = cboxMConcreto.get()
        comboxOConcreto['state'] = 'readonly'
        comboxOConcreto['values'] = list(concretoEc[pesoConcreto]['Origen'].keys())
        if pesoConcreto == 'Conoce masa del concreto':
            entryMC['state'] = 'normal'

    def OrigenConcretoCBOX(*args): # ECHO
        fc = float(cboxFc.get())*0.0980665
        wc = float(entryWc.get())
        pesoConcreto = cboxMConcreto.get()
        origenConcreto = cboxOrigenConcreto.get()
        if concretoEc[pesoConcreto]['Origen'][origenConcreto] == '4700*fc**(1/2)':
            Ecc = 4700*fc**(1/2)
        elif concretoEc[pesoConcreto]['Origen'][origenConcreto] == '5500*fc**(1/2)':
            Ecc = 5500*fc**(1/2)
        elif concretoEc[pesoConcreto]['Origen'][origenConcreto] == '3600*fc**(1/2)':
            Ecc = 3600*fc**(1/2)
        elif concretoEc[pesoConcreto]['Origen'][origenConcreto] == '3900*fc**(1/2)':
            Ecc = 3900*fc**(1/2)
        elif concretoEc[pesoConcreto]['Origen'][origenConcreto] == 'wc**(1.5)*0.047*fc**(1/2)':
            Ecc = wc**(1.5)*0.047*fc**(1/2)
        elif concretoEc[pesoConcreto]['Origen'][origenConcreto] == 'wc**(1.5)*0.041*fc**(1/2)':
            Ecc = wc**(1.5)*0.041*fc**(1/2)
        elif concretoEc[pesoConcreto]['Origen'][origenConcreto] == 'wc**(1.5)*0.031*fc**(1/2)':
            Ecc = wc**(1.5)*0.031*fc**(1/2)
        elif concretoEc[pesoConcreto]['Origen'][origenConcreto] == 'wc**(1.5)*0.034*fc**(1/2)':
            Ecc = wc**(1.5)*0.034*fc**(1/2)
        Ecco.set(int(Ecc*10.1972))
        u.set('0.2')

    def DibujarViga(*args): # N/A
        canvasViga.delete('all')
        # 1cm = 3 pixeles
        bwg = int(bwPropuesto.get())*3
        hg = int(hPropuesto.get())*3
        # estimar la posicion central
        xipos = math.floor((180-bwg)/2)
        yipos = math.floor((180-hg)/2)
        # estimar posicion final
        xfin = xipos + bwg
        yfin = yipos + hg
        # dibujar rectangulo
        canvasViga.create_rectangle(xipos, yipos, xfin, yfin, fill = 'gray')
        idPropuesta.set('V' + bwPropuesto.get() + 'x' + hPropuesto.get() + ' R' + recubrimientoViga.get())

    def simpleApoyo(*args): # ECHO
        longitud = float(simpleApoyoEntry.get())*100
        hT1 = math.ceil(longitud/16)
        hT2 = math.ceil(longitud/11)
        h1Tabla1.set(hT1)
        h1Tabla2.set(hT2)
        h1Promedio.set(math.ceil((hT1+hT2)/2))

    def unExtremoContinuo(*args): # ECHO
        longitud = float(unExtremoContinuoEntry.get())*100
        hT1 = math.ceil(longitud/18.5)
        hT2 = math.ceil(longitud/12)
        h2Tabla1.set(hT1)
        h2Tabla2.set(hT2)
        h2Promedio.set(math.ceil((hT1+hT2)/2))
    
    def ambosExtremos(*args): # ECHO
        longitud = float(ambosExtremosEntry.get())*100
        hT1 = math.ceil(longitud/21)
        hT2 = math.ceil(longitud/14)
        h3Tabla1.set(hT1)
        h3Tabla2.set(hT2)
        h3Promedio.set(math.ceil((hT1+hT2)/2))
    
    def enVoladizo(*args): # ECHO
        longitud = float(enVoladizoEntry.get())*100
        hT1 = math.ceil(longitud/8)
        hT2 = math.ceil(longitud/5)
        h4Tabla1.set(hT1)
        h4Tabla2.set(hT2)
        h4Promedio.set(math.ceil((hT1+hT2)/2))

    def dibujarColumna(*args): # N/A
        canvasColumna.delete('all')
        # 1cm = 3 pixeles
        bwg = int(bwProCol.get())*3
        hg = int(hProCol.get())*3
        # estimar la posicion central
        xipos = math.floor((180-bwg)/2)
        yipos = math.floor((180-hg)/2)
        # estimar posicion final
        xfin = xipos + bwg
        yfin = yipos + hg
        # dibujar rectangulo
        canvasColumna.create_rectangle(xipos, yipos, xfin, yfin, fill = 'gray')
        # estimar barras longitudinales
        cantidadBarras = cboxCantidadBarras.get()
        nombre = ''
        if cantidadBarras == '4':
            barrasLaterales = cboxBarrasLaterales.get()
            nombre = ' B4'+barrasLaterales
        elif cantidadBarras == '8':
            barrasLaterales = cboxBarrasLaterales.get()
            barrasCentrales = cboxBarrasCentrales.get()
            if barrasLaterales == barrasCentrales:
                nombre = ' B8'+barrasLaterales
            else:
                nombre = ' B4'+barrasLaterales + '+4'+barrasCentrales
        # nombrar columna
        idProCol.set('C' + bwProCol.get() + 'x' + hProCol.get() + ' R' + recubrimientoColumna.get() + nombre + ' E' + cboxEstribos.get())
    
    def CantidadBarrasCBOX(*args): # ECHO
        cantidadBarras = int(cboxCantidadBarras.get())
        if cantidadBarras == 4:
            comboxBarrasLaterales['state'] = 'readonly'
        elif cantidadBarras == 8:
            comboxBarrasLaterales['state'] = 'readonly'
            comboxBarrasCentrales['state'] = 'readonly'
    
    def añadirTramoCalc(*args): # N/A
        longitudNervio = float(entryLongitudNervio.get())
        cargaNervio = float(entryCargaNervio.get())
        apoyoInicial = cboxApoyoInicial.get()
        apoyoFinal = cboxApoyoFinal.get()
        nervioAnalisis[conteoTramo.get()] = {'longitud': longitudNervio, 'carga': cargaNervio, 'ini': apoyoInicial, 'fin': apoyoFinal}
        conteoTramo.set(conteoTramo.get()+1)

    def dibujarIdealizacionNervio(*args): # N/A
        canvasIdealizacion.delete('all')
        listaApoyos_1 = []
        listaApoyos_2 = []
        for tramo in nervioAnalisis:
            longitudes = nervioAnalisis[tramo]['longitud']    
            cargas = nervioAnalisis[tramo]['carga']
            apoyos_1 = nervioAnalisis[tramo]['ini']
            apoyos_2 = nervioAnalisis[tramo]['fin']
            listaApoyos_1.append(apoyos_1)
            listaApoyos_2.append(apoyos_2)
            listaCargas.append(cargas)
            listaLongitudes.append(longitudes)
        # se toma el primer apoyo de la lista 1 y el resto de apoyos de la lista 2
        listaApoyos.append(listaApoyos_1[0])
        cuenta = 0
        for tramo in nervioAnalisis:
            listaApoyos.append(listaApoyos_2[cuenta])
            cuenta += 1
        longitudTotal = sum(listaLongitudes)
        cargaMaxima = max(listaCargas)
        # 1m = 50 pixeles
        longTotCanvas = longitudTotal*50
        nervioAlturaCanvas = 0.35*50 #35cm tipico de altura
        # 1Tonf = 50 pixeles
        cargaMaxCanvas = cargaMaxima*50
        # Estimar la posición central 1100x240
        xInicial = math.floor((1100-longTotCanvas)/2)
        xFinal = xInicial + longTotCanvas
        mat1 = math.floor((240-nervioAlturaCanvas-cargaMaxCanvas)/2)
        yNervioInicial = 240-mat1
        yNervioFinal = yNervioInicial + nervioAlturaCanvas
        # dibujar Nervio
        canvasIdealizacion.create_rectangle(xInicial, yNervioInicial, xFinal, yNervioFinal, fill = 'gray')
        # dibujar Cargas
        xIniCarga = xInicial
        yFinCarga = yNervioInicial
        conteo = 0
        for longitud in listaLongitudes:
            yIniCarga = 240-nervioAlturaCanvas-mat1-(listaCargas[conteo])*50
            canvasIdealizacion.create_rectangle(xIniCarga, yIniCarga, xIniCarga+longitud*50, yFinCarga, fill = 'red')
            xIniCarga += longitud*50
            conteo += 1
        # dibujar apoyos
        x1 = xInicial
        y1 = yNervioFinal
        y2 = y1 + 25
        y3 = y2
        contar = 0
        #se añade un elemento vacio al final, para evitar error con dibujar apoyos
        listaLongitudes.append(0)
        for apoyo in listaApoyos:
            if apoyo == 'Articulado':
                x2 = x1 + 12.5
                x3 = x1 - 12.5
                canvasIdealizacion.create_polygon(x1, y1, x2, y2, x3, y3, fill = 'blue')
            x1 += listaLongitudes[contar]*50
            contar += 1
        #se debe borrar el elemento vacio impuesto por arreglo
        listaLongitudes.remove(0)

    def metodoTresMomentos(M1, L1, L2, M3, a1, a2): # N/A
        M2 = sympy.symbols('M2')
        tresMomentos = M1*L1+2*M2*(L1+L2)+M3*L2-a1-a2 # Ecuacion igualada a 0
        solucion = sympy.solve(tresMomentos, M2) # Despeja el valor de M2
        return solucion

    def calcularMomentos(*args): # N/A
        #calculando el grado de indeterminación
        gradoIndeterminado = -3
        for apoyo in listaApoyos:
            if apoyo == 'Articulado':
                gradoIndeterminado += 2 #son 2 las restricciones de un apoyo articulado
        if gradoIndeterminado >=3: #Aplicar metodo solo cuando son 3 o mas apoyos articulados
            # Hallando M1, cuando existe un voladizo
            if listaApoyos[0]=="Ninguno":
                M1 = -listaCargas[0]*listaLongitudes[0]**2/2    # -W*L^2/2
            else:
                M1 = 0 #el momento inicial es 0 para el primer tramo, si el apoyo es articulado
            # Hallando Mf, que es el momento final del nervio antes de aplicar el metodo, cuando hay voladizo
            if listaApoyos[len(listaApoyos)-1]=='Ninguno': #Tomando el ultimo apoyo
                Mf = -listaCargas[len(listaCargas)-1]*listaLongitudes[len(listaLongitudes)-1]**2/2    # -W*L^2/2 momento del voladizo
            else:
                Mf = 0# el momento final de toda la viga es 0, si el ultimo apoyo es Articulado
            # Hallando la cantidad de veces que se aplicara el metodo
            repeticiones = 0
            dato = 0
            global repetirMetodo
            repetirMetodo = listaApoyos.count('Articulado')-2
            repeticionFaltante = repetirMetodo # Cuantas repeticiones faltan para terminar el ciclo
            # Aplicando el metodo tantas veces como sea necesario
            while repeticiones < repetirMetodo:
                if listaApoyos[dato] == 'Ninguno':   
                    dato +=1   #Se aplica el metodo desde el siguiente tramo                    
                L1 = listaLongitudes[dato] 
                L2 = listaLongitudes[dato+1]
                if repeticionFaltante == 1: #si falta solo 1 repeticion quiere decir q es el ultimo tramo, por tanto,
                    M3 = Mf                 
                elif repeticionFaltante > 1: #para todas las repeticiones, exceptuando la final.
                    M3 = sympy.symbols('M3') #Se desconoce el valor de M3
                x1 = -6*listaCargas[dato]*L1**3/24 # -6*W1*L1^3/24 para carga uniforme
                x2 = -6*listaCargas[dato+1]*L2**3/24 # -6*W2*L2^3/24 para carga uniforme
                datosTresMomentos.append(M1) #Se guardan los datos del tramo
                datosTresMomentos.append(L1)
                datosTresMomentos.append(L2)
                datosTresMomentos.append(M3)
                datosTresMomentos.append(x1)
                datosTresMomentos.append(x2)
                solucionMetodo = metodoTresMomentos(M1, L1, L2, M3, x1, x2)
                resultadoTresMomentos.append(solucionMetodo)
                if repetirMetodo > 1: #Al haberse hecho el primer tramo, el siguiente M1 se convierte en icognita
                    M1 = sympy.symbols('M1') 
                repeticiones +=1
                repeticionFaltante -=1
                dato +=1
            #Mostrando datos en pantalla
            momentoInicialSeccion1.set(datosTresMomentos[0])
            longitud1Seccion1.set(datosTresMomentos[1])
            longitud2Seccion1.set(datosTresMomentos[2])
            momentoFinalSeccion1.set(datosTresMomentos[3])
            x1Seccion1.set(datosTresMomentos[4])
            x2Seccion1.set(datosTresMomentos[5])
            resultadoSeccion1.set(resultadoTresMomentos[0])
            if repetirMetodo >= 2: #
                momentoInicialSeccion2.set(datosTresMomentos[6])
                longitud1Seccion2.set(datosTresMomentos[7])
                longitud2Seccion2.set(datosTresMomentos[8])
                momentoFinalSeccion2.set(datosTresMomentos[9])
                x1Seccion2.set(datosTresMomentos[10])
                x2Seccion2.set(datosTresMomentos[11])
                resultadoSeccion2.set(resultadoTresMomentos[1]) 
            if repetirMetodo >= 3:
                momentoInicialSeccion3.set(datosTresMomentos[12])
                longitud1Seccion3.set(datosTresMomentos[13])
                longitud2Seccion3.set(datosTresMomentos[14])
                momentoFinalSeccion3.set(datosTresMomentos[15])
                x1Seccion3.set(datosTresMomentos[16])
                x2Seccion3.set(datosTresMomentos[17])
                resultadoSeccion3.set(resultadoTresMomentos[2])
            if repetirMetodo >= 4:
                momentoInicialSeccion4.set(datosTresMomentos[18])
                longitud1Seccion4.set(datosTresMomentos[19])
                longitud2Seccion4.set(datosTresMomentos[20])
                momentoFinalSeccion4.set(datosTresMomentos[21])
                x1Seccion4.set(datosTresMomentos[22])
                x2Seccion4.set(datosTresMomentos[23])
                resultadoSeccion4.set(resultadoTresMomentos[3])

    def calculandoReacciones(M1, W, L, M2): # N/A
        R1, R2 = sympy.symbols('R1 R2')
        ZMa = M1-(W*L**2)/2+M2+R2*L #Zumatoria de momentos en a
        respuesta1 = sympy.solve(ZMa, R2) #Reaccion 2
        ZFv = R1-W*L+respuesta1[0] #Zumatoria de fuerzas verticales
        respuesta2 = sympy.solve(ZFv, R1) #Reaccion 1
        solucion = [respuesta1, respuesta2]
        return solucion
    
    def reaccionesVoladizo(W, L): # N/A
        R1 = sympy.symbols('R1')
        ZFv = R1-W*L #Zumatoria de fuerzas verticales
        respuestaVoladizo = sympy.solve(ZFv, R1)
        return respuestaVoladizo[0]

    def calcularReacciones(*args): # N/A
        global repetirMetodo
        respuestaVoladizoFinal = 0
        respuestaVoladizoInicial = 0
        dato = 0
        if repetirMetodo == 1:
            momentoB.set(resultadoTresMomentos[0])          
            if listaApoyos[0]=='Ninguno':  
                respuestaVoladizoInicial = reaccionesVoladizo(listaCargas[0], listaLongitudes[0])
                dato +=1
            reacciones_1_2 = calculandoReacciones(datosTresMomentos[0], listaCargas[dato], listaLongitudes[dato], resultadoTresMomentos[0][0])
            reacciones_2_3 = calculandoReacciones(resultadoTresMomentos[0][0], listaCargas[dato+1], listaLongitudes[dato+1], datosTresMomentos[3])
            R1_total.set(respuestaVoladizoInicial+reacciones_1_2[1][0])
            R2_total.set(reacciones_1_2[0][0]+reacciones_2_3[1][0])
            R3_total.set(reacciones_2_3[0][0])
            if listaApoyos[len(listaApoyos)-1]=='Ninguno':
                respuestaVoladizoFinal = reaccionesVoladizo(listaCargas[len(listaCargas)-1], listaLongitudes[len(listaLongitudes)-1])
                R3_total.set(reacciones_2_3[0][0]+respuestaVoladizoFinal)
        elif repetirMetodo == 2:
            Mb, Mc = sympy.symbols('Mb Mc')
            ecuacion1 = entryEcuacion1.get()
            ecuacion2 = entryEcuacion2.get()
            solucion = list(sympy.linsolve([ecuacion1, ecuacion2], (Mb,Mc)))
            momentoB.set(solucion[0][0])
            momentoC.set(solucion[0][1])
            if listaApoyos[0]=='Ninguno':
                reaccionesVoladizo(listaCargas[0], listaLongitudes[0])
                dato +=1
            reacciones_1_2 = calculandoReacciones(datosTresMomentos[0], listaCargas[dato], listaLongitudes[dato], solucion[0][0])
            reacciones_2_3 = calculandoReacciones(solucion[0][0], listaCargas[dato+1], listaLongitudes[dato+1], solucion[0][1])
            reacciones_3_4 = calculandoReacciones(solucion[0][1], listaCargas[dato+2], listaLongitudes[dato+2], datosTresMomentos[9])
            if listaApoyos[len(listaApoyos)-1]=='Ninguno':
                reaccionesVoladizo(listaCargas[len(listaCargas)-1], listaLongitudes[len(listaLongitudes)-1])
            
        #Guardando datos y mostrando en pantalla    
        reaccionVoladizoInicial.set(respuestaVoladizoInicial)
        reaccionVoladizoFinal.set(respuestaVoladizoFinal)
        if repetirMetodo >= 1:
            listaReacciones.append(reacciones_1_2[1][0])
            listaReacciones.append(reacciones_1_2[0][0])
            listaReacciones.append(reacciones_2_3[1][0])
            listaReacciones.append(reacciones_2_3[0][0])
            reaccion1.set(listaReacciones[0])
            reaccion2_1.set(listaReacciones[1])
            reaccion2_2.set(listaReacciones[2])
            reaccion3_1.set(listaReacciones[3])
        if repetirMetodo >= 2:
            listaReacciones.append(reacciones_3_4[1][0])
            listaReacciones.append(reacciones_3_4[0][0])
            reaccion3_2.set(listaReacciones[4])
            reaccion4_1.set(listaReacciones[5])
        
        continuarDiseño()

    def continuarDiseño(*args): # N/A
        global repetirMetodo
        resultadoAreas = []
        diagramaCortante = []
        longitudesCortante = []
        diagramaMomento = []
        dato = 0
        cortante = 0
        areas = 0
        if repetirMetodo == 1:      
            if listaApoyos[0]=='Ninguno':  
                resultadoAreas.append(listaCargas[0]*listaLongitudes[0])
                diagramaCortante.append(0)
                diagramaCortante.append(-resultadoAreas[0])
                diagramaCortante.append(diagramaCortante[1]+float(R1_total.get()))
                dato +=1
                cortante +=2
                areas +=1
            else:
                diagramaCortante.append(float(R1_total.get()))
            resultadoAreas.append(listaCargas[dato]*listaLongitudes[dato])
            resultadoAreas.append(listaCargas[dato+1]*listaLongitudes[dato+1])
            diagramaCortante.append(diagramaCortante[cortante]-resultadoAreas[areas])
            diagramaCortante.append(diagramaCortante[cortante+1]+float(R2_total.get()))
            diagramaCortante.append(diagramaCortante[cortante+2]-resultadoAreas[areas+1])
            diagramaCortante.append(diagramaCortante[cortante+3]+float(R3_total.get()))  
            if listaApoyos[len(listaApoyos)-1]=='Ninguno':
                resultadoAreas.append(listaCargas[len(listaCargas)-1]*listaLongitudes[len(listaLongitudes)-1])
                diagramaCortante.append(round(diagramaCortante[cortante+4]-resultadoAreas[len(resultadoAreas)-1], 4))
        #Diagrama Momento

        #Mostrando datos en pantalla
        print(diagramaCortante)
        #print(diagramaMomento)

    def calculoLMSimpleApoyo(*args): # ECHO
        longitud = float(losaMacizaSimpleApoyo.get())
        calculoLMSA = math.ceil((longitud/20)*100)
        respuestaLMSimpleApoyo.set(calculoLMSA)

    def calculoLMUnApoyoContinuo(*args): # ECHO
        longitud = float(losaMacizaUnApoyoContinuo.get())
        calculoLMUC = math.ceil((longitud/24)*100)
        respuestaLMUnApoyoContinuo.set(calculoLMUC)
    
    def calculoLMAmbosApoyosContinuos(*args): # ECHO
        longitud = float(losaMacizaAmbosApoyosContinuos.get())
        calculoLMAAC = math.ceil((longitud/28)*100)
        respuestaLMAmbosApoyosContinuos.set(calculoLMAAC)
    
    def calculoLMEnVoladizo(*args): # ECHO
        longitud = float(losaMacizaEnVoladizo.get())
        calculoLMEV = math.ceil((longitud/10)*100)
        respuestaLMEnVoladizo.set(calculoLMEV)
    
    def funcionDireccion(*args): # ECHO
        losetaEspesorMinimo.set(4.5)
        nervadurasAnchoMinimo.set(10)

    def calculoLA(*args): # ECHO
        alturaLibreMaximaNervadura.set(int(bwNervio.get())*5)
        separacionMaximaNervadura.set(int(hNervio.get())*2.5)
        nervioRiostra.set(int(hNervio.get())/10) # h*10, para pasarlo a metros, h*10/100 = h/10
        
    def totalSobrecargaEntrepiso(*args):
        sobrecargaEntrepiso.set(round((
            float(sobrecargaParticiones.get()) + float(sobrecargaAcabados.get()) + float(sobrecargaCieloRaso.get())
            + float(sobrecargaMorteroNivelacion.get()) + float(sobrecargaInstalaciones.get())
        ), 3))

    def totalSobrecargaEscalera(*args):
        cHuella = float(huella.get())
        cContrahuella = float(contrahuella.get())
        sobrecargaPeldaños.set(round(cHuella*cContrahuella*0.024/(2*cHuella), 3))
        sobrecargaAcabadoPeldaños.set(round((4*(cHuella+cContrahuella)*0.022/cHuella), 3))
        sobrecargaPañeteLosa.set(round(2*0.022/(math.cos(math.atan(cContrahuella/cHuella))), 3))
        sobrecargaEscalera.set(round(( 
            float(sobrecargaPeldaños.get()) +
            float(sobrecargaAcabadoPeldaños.get()) +
            float(sobrecargaPañeteLosa.get())
            ), 3))
                 
    def calculoPesoMuro(*args):
        volumenMuros.set(round(float(longitudTotalMuros.get())*float(alturaMuros.get())*(float(espesorMuros.get())/100), 3))
        pesoMuros.set(round(float(volumenMuros.get())*1.6, 3))
    
    def calculoSobrecargaParticiones(*args):
        sobrecargaParticionesCalculadas.set(round((float(pesoMuros.get())/float(areaTotalLosa.get())), 3))

    def calculoSobrecargaMortero(*args):
        sobrecargaMortero.set(round((float(espesorMortero.get())/100)*2.3, 3))

    def funcionDireccionSismo(*args):
        Avc = float(Av.get())
        Fvc = float(Fv.get())
        Aac = float(Aa.get())
        Fac = float(Fa.get())
        Nc = float(entryPisos.get())
        Ctc = float(variable_Ct.get())
        ac = float(variable_a.get())
        htot = float(entryAlturaTotal.get())
        hmaxc = float(entryAltura.get())
        variable_Cu.set(round(max(1.75-1.2*Avc*Fvc, 1.2), 2))
        if Nc <= 12 and hmaxc <= 3:
            variable_Ta.set(round(0.1*Nc, 2))
        else:
            variable_Ta.set(round(Ctc*htot**ac, 2))
        Cuc = float(variable_Cu.get())
        Tac = float(variable_Ta.get())
        variable_Tmax.set(round(Cuc*Tac, 2))
        variable_T0.set(round(0.1*Avc*Fvc/(Aac*Fac), 2))
        variable_TC.set(round(0.48*Avc*Fvc/(Aac*Fac), 2))
        variable_TL.set(round(2.4*Fvc, 2))

    def funcionRecomendacionFEMA(*args):
        Tcomputed = round(float(varPeriodoFundamentalElementosFinitos.get()), 2)
        Tmax = round(float(variable_Tmax.get()), 2)
        Ta = round(float(variable_Ta.get()), 2)
        if Tcomputed > Tmax: 
            Treco = Tmax
        if Ta < Tcomputed < Tmax:
            Treco = Tcomputed
        if Tcomputed < Ta:
            Treco = Ta
        varRecomendacionFEMA.set(Treco)

    def funcionEspectroAceleracion(*args):
        Tfun = float(varPeriodoElegido.get())
        Aac = float(Aa.get())
        Fac = float(Fa.get())
        I = float(coeficienteImportancia.get())
        Avc = float(Av.get())
        Fvc = float(Fv.get())
        TL = float(variable_TL.get())
        TC = float(variable_TC.get())
        if Tfun < TC:
            Sa = 2.5*Aac*Fac*I
            varCondicionesEspectro.set('Sa = 2.5*Aa*Fa*I')
        elif TC < Tfun < TL:
            Sa = 1.2*Avc*Fvc*I/Tfun
            varCondicionesEspectro.set('Sa = 1.2*Av*Fv*I/T')
        elif Tfun > TL:
            Sa = 1.2*Avc*Fvc*TL*I/Tfun**2
            varCondicionesEspectro.set('Sa = 1.2*Av*Fv*TL*I/T^2')
        varSa.set(Sa)
    
    def funcionGraficoEspectro(*args):
        TC = float(variable_TC.get())
        Aac = float(Aa.get())
        Fac = float(Fa.get())
        Avc = float(Av.get())
        Fvc = float(Fv.get())
        I = float(coeficienteImportancia.get())
        TL = float(variable_TL.get())
        TData = list(numpy.linspace(0, 8, 160))
        SaData = []
        SaDataReducido = []
        Rc = float(R.get())
        for data in TData:
            if data < TC:
                Sa = 2.5*Aac*Fac*I
                SaData.append(Sa)
                SaDataReducido.append(Sa/Rc)
            elif TC < data < TL:
                Sa = 1.2*Avc*Fvc*I/data
                SaData.append(Sa)
                SaDataReducido.append(Sa/Rc)
            elif data > TL:
                Sa = 1.2*Avc*Fvc*TL*I/data**2
                SaData.append(Sa)
                SaDataReducido.append(Sa/Rc)
        plt.plot(TData, SaData, label = 'Pleno')
        plt.plot(TData, SaDataReducido, label = 'Reducido')
        plt.ylabel('Sa(g)')
        plt.xlabel('T(s)')
        plt.title('ESPECTRO ELASTICO DE ACELERACION')
        plt.legend()
        plt.show()


    ################################################### VENTANA PRINCIPAL ###################################################
    root = tk.Tk()
    root.configure(bg = 'white'), root.maxsize(1365, 700), root.minsize(1365, 700)
    root.title('ASISTENTE ESTRUCTURAL - AETA - (NSR-10)')
    #################################################### ESTILOS DE LETRA ###################################################
    boldFont = 'Times 11 bold'
    normalFont = 'Times 11'
    ####################################################### TAB USADA #######################################################
    tab = ttk.Notebook(root)
    tab.grid(column = 0, row = 0) 
    ######################################### VARIABLES DE ENTRADAS Y LABELS USADAS #########################################
    entryProyecto =                     tk.StringVar()
    entryDireccion =                    tk.StringVar()
    entryPropietario =                  tk.StringVar()
    entryRealizo =                      tk.StringVar()
    entryReviso =                       tk.StringVar()
    entryFecha =                        tk.StringVar()
    cboxDepartamentos =                 tk.StringVar()
    cboxMunicipios =                    tk.StringVar()
    codigoMunicipio =                   tk.StringVar()
    Aa =                                tk.StringVar()
    Av =                                tk.StringVar()
    Ae =                                tk.StringVar()
    Ad =                                tk.StringVar()
    amenazaNivel =                      tk.StringVar()
    disipacion =                        tk.StringVar()
    cboxGUso =                          tk.StringVar()
    coeficienteImportancia =            tk.StringVar()
    entryPisos =                        tk.StringVar()
    entryAltura =                       tk.StringVar()
    entryAlturaTotal =                  tk.StringVar()
    cboxSEstructural =                  tk.StringVar()
    cboxSistemaRS =                     tk.StringVar()
    cboxSistemaRS2 =                    tk.StringVar()
    resistenciaVertical =               tk.StringVar()
    chequeoLabel =                      tk.StringVar()
    R0 =                                tk.StringVar()
    O0 =                                tk.StringVar()
    cboxPerfilSuelo =                   tk.StringVar()
    Fa =                                tk.StringVar()
    Fv =                                tk.StringVar()
    entryIP =                           tk.StringVar()
    entryIA =                           tk.StringVar()
    entryAR =                           tk.StringVar()
    R =                                 tk.StringVar()
    cboxFc =                            tk.StringVar()
    cboxMConcreto =                     tk.StringVar()
    entryWc =                           tk.StringVar()
    cboxOrigenConcreto =                tk.StringVar()
    Ecco =                              tk.StringVar()
    u =                                 tk.StringVar()
    Ecas =                              tk.StringVar()
    bwPropuesto =                       tk.StringVar()
    hPropuesto =                        tk.StringVar()
    idPropuesta =                       tk.StringVar()
    simpleApoyoEntry =                  tk.StringVar()
    h1Tabla1 =                          tk.StringVar()
    h1Tabla2 =                          tk.StringVar()
    h1Promedio =                        tk.StringVar()
    unExtremoContinuoEntry =            tk.StringVar()
    h2Tabla1 =                          tk.StringVar()
    h2Tabla2 =                          tk.StringVar()
    h2Promedio =                        tk.StringVar()
    ambosExtremosEntry =                tk.StringVar()
    h3Tabla1 =                          tk.StringVar()
    h3Tabla2 =                          tk.StringVar()
    h3Promedio =                        tk.StringVar()
    enVoladizoEntry =                   tk.StringVar()
    h4Tabla1 =                          tk.StringVar()
    h4Tabla2 =                          tk.StringVar()
    h4Promedio =                        tk.StringVar()
    recubrimientoViga =                 tk.StringVar()
    bwMinimo =                          tk.StringVar()
    notaD =                             tk.StringVar()
    normaColumna =                      tk.StringVar()
    diMenorCol =                        tk.StringVar()
    areaMinCol =                        tk.StringVar()
    bwProCol =                          tk.StringVar()
    hProCol =                           tk.StringVar()
    idProCol =                          tk.StringVar()
    recubrimientoColumna =              tk.StringVar()
    cboxCantidadBarras =                tk.StringVar()
    cboxBarrasLaterales =               tk.StringVar() 
    cboxBarrasCentrales =               tk.StringVar()
    cboxEstribos =                      tk.StringVar()
    entryLongitudNervio =               tk.StringVar()
    entryCargaNervio =                  tk.StringVar()
    cboxApoyoInicial =                  tk.StringVar()
    cboxApoyoFinal =                    tk.StringVar()
    conteoTramo =                       tk.IntVar()
    momentoInicialSeccion1 =            tk.StringVar()
    longitud1Seccion1 =                 tk.StringVar()
    longitud2Seccion1 =                 tk.StringVar()
    momentoFinalSeccion1 =              tk.StringVar()
    x1Seccion1 =                        tk.StringVar()
    x2Seccion1 =                        tk.StringVar()
    resultadoSeccion1 =                 tk.StringVar()
    momentoInicialSeccion2 =            tk.StringVar()
    longitud1Seccion2 =                 tk.StringVar()
    longitud2Seccion2 =                 tk.StringVar()
    momentoFinalSeccion2 =              tk.StringVar()
    x1Seccion2 =                        tk.StringVar()
    x2Seccion2 =                        tk.StringVar()
    resultadoSeccion2 =                 tk.StringVar()
    momentoInicialSeccion3 =            tk.StringVar()
    longitud1Seccion3 =                 tk.StringVar()
    longitud2Seccion3 =                 tk.StringVar()
    momentoFinalSeccion3 =              tk.StringVar()
    x1Seccion3 =                        tk.StringVar()
    x2Seccion3 =                        tk.StringVar()
    resultadoSeccion3 =                 tk.StringVar()
    momentoInicialSeccion4 =            tk.StringVar()
    longitud1Seccion4 =                 tk.StringVar()
    longitud2Seccion4 =                 tk.StringVar()
    momentoFinalSeccion4 =              tk.StringVar()
    x1Seccion4 =                        tk.StringVar()
    x2Seccion4 =                        tk.StringVar()
    resultadoSeccion4 =                 tk.StringVar()
    entryEcuacion1 =                    tk.StringVar()
    entryEcuacion2 =                    tk.StringVar()
    entryEcuacion3 =                    tk.StringVar()
    entryEcuacion4 =                    tk.StringVar()
    momentoB =                          tk.StringVar()
    momentoC =                          tk.StringVar()
    momentoD =                          tk.StringVar()
    momentoE =                          tk.StringVar()
    reaccion1 =                         tk.StringVar()
    reaccion2_1 =                       tk.StringVar()
    reaccion2_2 =                       tk.StringVar()
    reaccion3_1 =                       tk.StringVar()
    reaccion3_2 =                       tk.StringVar()
    reaccion4_1 =                       tk.StringVar()
    reaccion4_2 =                       tk.StringVar()
    reaccion5_1 =                       tk.StringVar()
    reaccion5_2 =                       tk.StringVar()
    reaccion6 =                         tk.StringVar()
    reaccionVoladizoInicial =           tk.StringVar()
    reaccionVoladizoFinal =             tk.StringVar()
    cboxDireccionLosa =                 tk.StringVar()
    bwNervio =                          tk.StringVar()
    hNervio =                           tk.StringVar()
    nervioPropuesto =                   tk.StringVar()
    losaMacizaSimpleApoyo =             tk.StringVar()
    losaMacizaUnApoyoContinuo =         tk.StringVar()
    losaMacizaAmbosApoyosContinuos =    tk.StringVar()
    losaMacizaEnVoladizo =              tk.StringVar()
    losaMacizaAlturaPropuesta =         tk.StringVar()
    sobrecargaParticiones =             tk.StringVar()
    sobrecargaAcabados =                tk.StringVar()
    sobrecargaCieloRaso =               tk.StringVar()
    sobrecargaMorteroNivelacion =       tk.StringVar()
    sobrecargaInstalaciones =           tk.StringVar()
    sobrecargaEntrepiso =               tk.StringVar()
    huella =                            tk.StringVar()
    contrahuella =                      tk.StringVar()
    sobrecargaPeldaños =                tk.StringVar()
    sobrecargaAcabadoPeldaños =         tk.StringVar()
    sobrecargaPañeteLosa =              tk.StringVar()
    sobrecargaEscalera =                tk.StringVar()
    R1_total =                          tk.StringVar()
    R2_total =                          tk.StringVar()
    R3_total =                          tk.StringVar()
    R4_total =                          tk.StringVar()
    R5_total =                          tk.StringVar()
    R6_total =                          tk.StringVar()
    respuestaLMSimpleApoyo =            tk.StringVar()
    respuestaLMUnApoyoContinuo =        tk.StringVar()
    respuestaLMAmbosApoyosContinuos =   tk.StringVar()
    respuestaLMEnVoladizo =             tk.StringVar()
    losetaEspesorMinimo =               tk.StringVar()
    nervadurasAnchoMinimo =             tk.StringVar()
    alturaLibreMaximaNervadura =        tk.StringVar()
    separacionMaximaNervadura =         tk.StringVar()
    nervioRiostra =                     tk.StringVar()
    cargaVivaN1 =                       tk.StringVar()
    entryCargaVivaN1 =                  tk.StringVar()
    cargaVivaN2 =                       tk.StringVar()
    entryCargaVivaN2 =                  tk.StringVar()
    cargaVivaN3 =                       tk.StringVar()
    entryCargaVivaN3 =                  tk.StringVar()
    cargaVivaN4 =                       tk.StringVar()
    entryCargaVivaN4 =                  tk.StringVar()
    cargaVivaN5 =                       tk.StringVar()
    entryCargaVivaN5 =                  tk.StringVar()
    cargaVivaN6 =                       tk.StringVar()
    entryCargaVivaN6 =                  tk.StringVar()
    espesorMortero =                    tk.StringVar()
    sobrecargaMortero =                 tk.StringVar()
    longitudTotalMuros =                tk.StringVar()
    alturaMuros =                       tk.StringVar()
    espesorMuros =                      tk.StringVar()
    volumenMuros =                      tk.StringVar()
    pesoMuros =                         tk.StringVar()
    areaTotalLosa =                     tk.StringVar()
    sobrecargaParticionesCalculadas =   tk.StringVar()
    cboxDireccionSismo =                tk.StringVar()
    variable_Ct =                       tk.StringVar()
    variable_a =                        tk.StringVar()
    variable_Cu =                       tk.StringVar()
    variable_Ta =                       tk.StringVar()
    variable_Tmax =                     tk.StringVar()
    variable_T0 =                       tk.StringVar()
    variable_TC =                       tk.StringVar()
    variable_TL =                       tk.StringVar()
    varRecomendacionFEMA =              tk.StringVar()
    varPeriodoElegido =                 tk.StringVar()
    varPeriodoFundamentalElementosFinitos = tk.StringVar()
    varCondicionesEspectro =            tk.StringVar()
    varSa =                             tk.StringVar()
    varMasaTotal =                      tk.StringVar()
    varCortanteVasal =                  tk.StringVar()
    varK =                              tk.StringVar()

    ############################### DENTRO DEL TAB SE COLOCA EL FRAME GENERAL CON SU INTERFAZ ############################### 
    frameGeneral = tk.Frame(tab, bg = '#FFFFFF')    
    tab.add(frameGeneral, text = 'INFORMACIÓN GENERAL')
    crearLabel(frameGeneral, 'Proyecto:', boldFont, 2, 1, 'N',                                                          0, 0)
    crearEntry(frameGeneral, entryProyecto, normalFont, 35, Ninguna, 1, 1, 'W',                                         2, 0)
    crearLabel(frameGeneral, 'Dirección:', boldFont, 2, 1, 'N',                                                         0, 1)
    crearEntry(frameGeneral, entryDireccion, normalFont, 35, Ninguna, 1, 1, 'W',                                        2, 1)
    crearLabel(frameGeneral, 'Propietario:', boldFont, 2, 1, 'N',                                                       0, 2)
    crearEntry(frameGeneral, entryPropietario, normalFont, 35, Ninguna, 1, 1, 'W',                                      2, 2)
    crearLabel(frameGeneral, 'Realizó:', boldFont, 2, 1, 'N',                                                           0, 3)
    crearEntry(frameGeneral, entryRealizo, normalFont, 35, Ninguna, 1, 1, 'W',                                          2, 3)
    crearLabel(frameGeneral, 'Revisó:', boldFont, 2, 1, 'N',                                                            0, 4)
    crearEntry(frameGeneral, entryReviso, normalFont, 35, Ninguna, 1, 1, 'W',                                           2, 4)
    crearLabel(frameGeneral, 'Fecha:', boldFont, 2, 1, 'N',                                                             0, 5)
    crearEntry(frameGeneral, entryFecha, normalFont, 35, Ninguna, 1, 1, 'W',                                            2, 5)
                                                                                                                        #Espacio
    crearLabel(frameGeneral, 'INFORMACIÓN DEL PROYECTO', boldFont, 2, 1, 'W',                                           0, 7)
    crearLabel(frameGeneral, 'Departamento', boldFont, 1, 1, 'W',                                                       0, 8)
    comboxDepartamentos = crearCBox(frameGeneral, cboxDepartamentos, normalFont, 30, departamentoCBOX, 1, 1, 'W',       2, 8)
    crearLabel(frameGeneral, 'Municipio', boldFont, 1, 1, 'W',                                                          0, 9)
    comboxMunicipios = crearCBox(frameGeneral, cboxMunicipios, normalFont, 30, municipioCBOX, 1, 1, 'W',                2, 9)
    crearLabel(frameGeneral, 'Código del municipio', boldFont, 1, 1, 'W',                                               0, 10)
    crearLabelVariable(frameGeneral, codigoMunicipio, normalFont, 1, 'W',                                               2, 10)
    crearLabel(frameGeneral, 'Coeficientes Sísmicos NSR-10 (Apéndice A-4)', boldFont, 2, 1, 'W',                        0, 11)
    crearLabel(frameGeneral, 'Aa', normalFont, 1, 1, 'N',                                                               0, 12)
    crearLabelVariable(frameGeneral, Aa, normalFont, 1, 'W',                                                            1, 12)
    crearLabel(frameGeneral, 'Av', normalFont, 1, 1, 'N',                                                               0, 13)
    crearLabelVariable(frameGeneral, Av, normalFont, 1, 'W',                                                            1, 13)
    crearLabel(frameGeneral, 'Ae', normalFont, 1, 1, 'N',                                                               0, 14)
    crearLabelVariable(frameGeneral, Ae, normalFont, 1, 'W',                                                            1, 14)
    crearLabel(frameGeneral, 'Ad', normalFont, 1, 1, 'N',                                                               0, 15)
    crearLabelVariable(frameGeneral, Ad, normalFont, 1, 'W',                                                            1, 15)
    crearLabel(frameGeneral, 'Zona de amenaza sísmica (A.2.3)', boldFont, 2, 1, 'W',                                    0, 16)
    crearLabelVariable(frameGeneral, amenazaNivel, normalFont, 1, 'W',                                                  2, 16)
    crearLabel(frameGeneral, 'Capacidad de disipación de energía mínima requerida (A.3.1.4)', boldFont, 2, 1, 'W',      0, 17)
    crearLabelVariable(frameGeneral, disipacion, normalFont, 1, 'W',                                                    2, 17)
    crearLabel(frameGeneral, 'Grupo de uso (A.2.5.1)', boldFont, 1, 1, 'W',                                             0, 18)
    comboxGUso = crearCBox(frameGeneral, cboxGUso, normalFont, 40, grupoUsoCBOX, 1, 1, 'W',                             2, 18)
    crearLabel(frameGeneral, 'Coeficiente de importancia (A.2.5.2)', boldFont, 2, 1, 'W',                               0, 19)
    crearLabelVariable(frameGeneral, coeficienteImportancia, normalFont, 1, 'W',                                        2, 19)
    crearLabel(frameGeneral, 'Número de pisos', boldFont, 1, 1, 'W',                                                    0, 20)
    crearEntry(frameGeneral, entryPisos, normalFont, 5, Ninguna, 1, 1, 'W',                                             1, 20)
    crearLabel(frameGeneral, 'Altura máxima (m)', boldFont, 1, 1, 'W',                                                  0, 21)
    crearEntry(frameGeneral, entryAltura, normalFont, 5, Ninguna, 1, 1, 'W',                                            1, 21)
    crearLabel(frameGeneral, 'Altura total (m)', boldFont, 1, 1, 'W',                                                   0, 22)
    crearEntry(frameGeneral, entryAlturaTotal, normalFont, 5, Ninguna, 1, 1, 'W',                                       1, 22)
    crearLabel(frameGeneral, 'Sistema estructural (A.3.2)', boldFont, 2, 1, 'W',                                        0, 23)
    comboxSEstructural = crearCBox(frameGeneral, cboxSEstructural, normalFont, 40, sistemaEstructuralCBOX, 1, 1, 'W',   2, 23)
    crearLabel(frameGeneral, 'Sistema resistencia sísmica (fuerzas horizontales)', boldFont, 3, 1, 'W',                 0, 24)
    comboxSistemaRS = crearCBox(frameGeneral, cboxSistemaRS, normalFont, 110, SistemaRSCBOX, 3, 1, 'W',                 0, 25)
    comboxSistemaRS2 = crearCBox(frameGeneral, cboxSistemaRS2, normalFont, 110, SistemaRSCBOX2, 3, 1, 'W',              0, 26)
    crearLabel(frameGeneral, 'Sistema resistencia para cargas verticales', boldFont, 3, 1, 'W',                         0, 27)
    crearLabelVariable(frameGeneral, resistenciaVertical, normalFont, 3, 'W',                                           0, 28)
    crearLabel(frameGeneral, 'Revisión del sistema estructural (Tablas A.3-1 a A.3-4)', boldFont, 2, 1, 'W',            4, 0)
    crearLabelVariable(frameGeneral, chequeoLabel, normalFont, 1, 'W',                                                  6, 0)
    crearLabel(frameGeneral, 'R0', normalFont, 1, 1, 'N',                                                               4, 1)
    crearLabelVariable(frameGeneral, R0, normalFont, 1, 'W',                                                            5, 1)
    crearLabel(frameGeneral, 'Ω0', normalFont, 1, 1, 'N',                                                               4, 2)
    crearLabelVariable(frameGeneral, O0, normalFont, 1, 'W',                                                            5, 2)
    crearLabel(frameGeneral, 'Tipos de perfil de suelo (A.2.4.2)', boldFont, 2, 1, 'W',                                 4, 3)
    comboxPerfilSuelo = crearCBox(frameGeneral, cboxPerfilSuelo, normalFont, 4, PerfilSueloCBOX, 1, 1, 'W',             6, 3)
    crearLabel(frameGeneral, 'Coeficientes de sitio (Tablas A.2.4-3 y A.2.4-4)', boldFont, 2, 1, 'W',                   4, 4)
    crearLabel(frameGeneral, 'Fa', normalFont, 1, 1, 'N',                                                               4, 5)
    crearLabelVariable(frameGeneral, Fa, normalFont, 1, 'W',                                                            5, 5)
    crearLabel(frameGeneral, 'Fv', normalFont, 1, 1, 'N',                                                               4, 6)
    crearLabelVariable(frameGeneral, Fv, normalFont, 1, 'W',                                                            5, 6)
    crearLabel(frameGeneral, 'Irregularidades de la estructura (Figuras A.3-1, A.3-2)', boldFont, 3, 1, 'W',            4, 7)
    crearLabel(frameGeneral, 'Irregularidad en planta Φp', boldFont, 1, 1, 'W',                                         4, 8)
    crearEntry(frameGeneral, entryIP, normalFont, 5, calcularRCBOX, 1, 1, 'W',                                          5, 8)
    crearLabel(frameGeneral, 'Irregularidad en altura Φa', boldFont, 1, 1, 'W',                                         4, 9)
    crearEntry(frameGeneral, entryIA, normalFont, 5, calcularRCBOX, 1, 1, 'W',                                          5, 9)
    crearLabel(frameGeneral, 'Ausencia de redundancia Φr', boldFont, 1, 1, 'W',                                         4, 10)
    crearEntry(frameGeneral, entryAR, normalFont, 5, calcularRCBOX, 1, 1, 'W',                                          5, 10)
    crearLabel(frameGeneral, '(A.3.3.8)', boldFont, 1, 1, 'W',                                                          6, 10)
    crearLabel(frameGeneral, 'Coeficiente de capacidad de disipación de energía', boldFont, 3, 1, 'W',                  4, 11)
    crearLabel(frameGeneral, 'R', normalFont, 1, 1, 'N',                                                                4, 12)
    crearLabelVariable(frameGeneral, R, normalFont, 1, 'W',                                                             5, 12)
                                                                                                                        #Espacio
    crearLabel(frameGeneral, 'MATERIALES', boldFont, 1, 1, 'W',                                                         4, 14)
    crearLabel(frameGeneral, 'Hormigón (C.8.5)', boldFont, 1, 1, 'W',                                                   4, 15)
    crearLabel(frameGeneral, 'Resistencia a la compresión (kg/cm^2)', boldFont, 2, 1, 'W',                              4, 16)
    comboxFc = crearCBox(frameGeneral, cboxFc, normalFont, 5, Ninguna, 1, 1, 'W',                                       6, 16)
    crearLabel(frameGeneral, 'Masa del concreto', boldFont, 1, 1, 'W',                                                  4, 17)
    comboxMConcreto = crearCBox(frameGeneral, cboxMConcreto, normalFont, 25, MConcretoCBOX, 2, 1, 'W',                  5, 17)
    crearLabel(frameGeneral, 'Wc (kg/m^3)', boldFont, 1, 1, 'W',                                                        7, 17)
    entryMC = crearEntry(frameGeneral, entryWc, normalFont, 5, Ninguna, 1, 1, 'W',                                      8, 17)
    crearLabel(frameGeneral, 'Origen del concreto', boldFont, 1, 1, 'W',                                                4, 18)
    comboxOConcreto = crearCBox(frameGeneral, cboxOrigenConcreto, normalFont, 35, OrigenConcretoCBOX, 4, 1, 'W',        5, 18)
    crearLabel(frameGeneral, 'Ec (kg/cm^2)', normalFont, 1, 1, 'N',                                                     4, 19)
    crearLabelVariable(frameGeneral, Ecco, normalFont, 1, 'W',                                                          5, 19)
    crearLabel(frameGeneral, 'u', normalFont, 1, 1, 'N',                                                                4, 20)
    crearLabelVariable(frameGeneral, u, normalFont, 1, 'W',                                                             5, 20)
    crearLabel(frameGeneral, 'Acero de refuerzo (NTC 2289)', boldFont, 1, 1, 'W',                                       4, 21)
    crearLabel(frameGeneral, 'fy (kg/cm^2)', normalFont, 1, 1, 'N',                                                     4, 22)
    crearLabelVariable(frameGeneral, Ecas, normalFont, 1, 'W',                                                          5, 22)
                                                                                                                        #Espacio
    crearLabel(frameGeneral, 'MÉTODO DE ANÁLISIS SÍSMICO', boldFont, 1, 1, 'W',                                         4, 24)
    crearButton(frameGeneral, 'Verificar', Ninguna, 6, 'W',                                                             6, 24)
    crearLabel(frameGeneral, 'Método de la fuerza horizontal equivalente (A.3.4.2.1)', boldFont, 2, 1, 'W',             4, 25)
    crearLabel(frameGeneral, 'Método del análisis dinámico elástico (A.3.4.2.2)', boldFont, 2, 1, 'W',                  4, 26)
    
    ################################################# SEGUNDO FRAME DEL TAB #################################################
    framePredimensionamiento = tk.Frame(tab, bg = '#FFFFFF')    
    tab.add(framePredimensionamiento, text = 'PREDIMENSIONAMIENTO')
    crearLabel(framePredimensionamiento, 'VIGAS', boldFont, 2, 2, 'N',                                                  0, 1)
    crearLabel(framePredimensionamiento, 'Propuesta', boldFont, 1, 3, 'W',                                              6, 0)
    crearLabel(framePredimensionamiento, 'bw', boldFont, 1, 1, 'N',                                                     7, 0)
    crearEntry(framePredimensionamiento, bwPropuesto, normalFont, 5, DibujarViga, 1, 1, 'N',                            7, 1)
    crearLabel(framePredimensionamiento, 'h', boldFont, 1, 1, 'N',                                                      8, 0)
    crearEntry(framePredimensionamiento, hPropuesto, normalFont, 5, DibujarViga, 1, 1, 'N',                             8, 1)
    canvasViga = crearCanvas(framePredimensionamiento, 180, 180, 3, 7,                                                  6, 3)
    crearLabelVariable(framePredimensionamiento, idPropuesta, boldFont, 2, 'N',                                         7, 2)
    crearLabel(framePredimensionamiento, 'L. crítico', boldFont, 1, 1, 'N',                                             2, 1)
    crearLabel(framePredimensionamiento, 'm', boldFont, 1, 1, 'N',                                                      2, 2)
    crearLabel(framePredimensionamiento, 'Tablas', boldFont, 2, 1, 'N',                                                 3, 0)
    crearLabel(framePredimensionamiento, 'C.9.5(a)', boldFont, 1, 1, 'N',                                               3, 1)
    crearLabel(framePredimensionamiento, 'cm', boldFont, 3, 1, 'N',                                                     3, 2)
    crearLabel(framePredimensionamiento, 'CR.9.5', boldFont, 1, 1, 'N',                                                 4, 1)
    crearLabel(framePredimensionamiento, 'Promedio', boldFont, 1, 1, 'N',                                               5, 1)
    crearLabel(framePredimensionamiento, 'Simplemente apoyadas', boldFont, 2, 1, 'W',                                   0, 3)
    crearEntry(framePredimensionamiento, simpleApoyoEntry, normalFont, 10, simpleApoyo, 1, 1, 'N',                      2, 3)
    crearLabelVariable(framePredimensionamiento, h1Tabla1, normalFont, 1, 'N',                                          3, 3)
    crearLabelVariable(framePredimensionamiento, h1Tabla2, normalFont, 1, 'N',                                          4, 3)
    crearLabelVariable(framePredimensionamiento, h1Promedio, normalFont, 1, 'N',                                        5, 3)
    crearLabel(framePredimensionamiento, 'Con un extremo continuo', boldFont, 2, 1, 'W',                                0, 4)
    crearEntry(framePredimensionamiento, unExtremoContinuoEntry, normalFont, 10, unExtremoContinuo, 1, 1, 'N',          2, 4)
    crearLabelVariable(framePredimensionamiento, h2Tabla1, normalFont, 1, 'N',                                          3, 4)
    crearLabelVariable(framePredimensionamiento, h2Tabla2, normalFont, 1, 'N',                                          4, 4)
    crearLabelVariable(framePredimensionamiento, h2Promedio, normalFont, 1, 'N',                                        5, 4)
    crearLabel(framePredimensionamiento, 'Ambos extremos continuos', boldFont, 2, 1, 'W',                               0, 5)
    crearEntry(framePredimensionamiento, ambosExtremosEntry, normalFont, 10, ambosExtremos, 1, 1, 'N',                  2, 5)
    crearLabelVariable(framePredimensionamiento, h3Tabla1, normalFont, 1, 'N',                                          3, 5)
    crearLabelVariable(framePredimensionamiento, h3Tabla2, normalFont, 1, 'N',                                          4, 5)
    crearLabelVariable(framePredimensionamiento, h3Promedio, normalFont, 1, 'N',                                        5, 5)
    crearLabel(framePredimensionamiento, 'En voladizo', boldFont, 2, 1, 'W',                                            0, 6)
    crearEntry(framePredimensionamiento, enVoladizoEntry, normalFont, 10, enVoladizo, 1, 1, 'N',                        2, 6)
    crearLabelVariable(framePredimensionamiento, h4Tabla1, normalFont, 1, 'N',                                          3, 6)
    crearLabelVariable(framePredimensionamiento, h4Tabla2, normalFont, 1, 'N',                                          4, 6)
    crearLabelVariable(framePredimensionamiento, h4Promedio, normalFont, 1, 'N',                                        5, 6)
    crearLabel(framePredimensionamiento, 'Recubrimiento (cm) (C.7.7.2)', boldFont, 5, 1, 'E',                           0, 7)
    crearEntry(framePredimensionamiento, recubrimientoViga, normalFont, 4, Ninguna, 1, 1, 'N',                          5, 7)
    crearLabel(framePredimensionamiento, 'NOTA', boldFont, 1, 1, 'W',                                                   0, 8)
    crearLabel(framePredimensionamiento, 'a) Se predimensiona teniendo en cuenta el proyecto arquitectónico y localización de ejes.', normalFont, 5, 1, 'W',   1, 8)
    crearLabel(framePredimensionamiento, 'b) En el análisis del software estructural se calculan las deflexiones.', normalFont, 5, 1, 'W',                      1, 9)
    crearLabelVariable(framePredimensionamiento, bwMinimo, normalFont, 5, 'W',                                          1, 10)
    crearLabelVariable(framePredimensionamiento, notaD, normalFont, 5, 'W',                                             1, 11)
    crearLabel(framePredimensionamiento, 'COLUMNAS', boldFont, 1, 1, 'N',                                               9, 0)
    crearLabel(framePredimensionamiento, 'Dimensión menor (cm)', boldFont, 1, 1, 'N',                                   9, 1)
    crearLabel(framePredimensionamiento, 'Área mínima (cm^2)', boldFont, 1, 1, 'N',                                     9, 2)
    crearLabel(framePredimensionamiento, 'Propuesta', boldFont, 1, 3, 'E',                                              11, 0)
    crearLabel(framePredimensionamiento, 'bw', boldFont, 1, 1, 'N',                                                     12, 0)
    crearLabel(framePredimensionamiento, 'h', boldFont, 1, 1, 'N',                                                      13, 0)
    crearLabelVariable(framePredimensionamiento, normaColumna, boldFont, 1, 'N',                                        10, 0)
    crearLabelVariable(framePredimensionamiento, diMenorCol, normalFont, 1, 'N',                                        10, 1)
    crearLabelVariable(framePredimensionamiento, areaMinCol, normalFont, 1, 'N',                                        10, 2)
    crearEntry(framePredimensionamiento, bwProCol, normalFont, 5, dibujarColumna, 1, 1, 'N',                            12, 1)
    crearEntry(framePredimensionamiento, hProCol, normalFont, 5, dibujarColumna, 1, 1, 'N',                             13, 1)
    crearLabelVariable(framePredimensionamiento, idProCol, boldFont, 2, 'N',                                            12, 2)
    canvasColumna = crearCanvas(framePredimensionamiento, 180, 180, 3, 7,                                               11, 3)
    crearLabel(framePredimensionamiento, 'Recubrimiento (cm) (C.7.7.2)', boldFont, 1, 1, 'W',                           9, 3)
    crearEntry(framePredimensionamiento, recubrimientoColumna, normalFont, 5, Ninguna, 1, 1, 'W',                       10, 3)
    crearLabel(framePredimensionamiento, 'Área de refuerzo longitudinal (C.10.9.1)', boldFont, 2, 1, 'W',               9, 4)
    crearLabel(framePredimensionamiento, 'Cantidad de barras', boldFont, 1, 1, 'W',                                     9, 5)
    comboxCantidadBarras = crearCBox(framePredimensionamiento, cboxCantidadBarras, normalFont, 5, CantidadBarrasCBOX, 1, 1, 'W', 10, 5)
    crearLabel(framePredimensionamiento, 'Barras laterales', boldFont, 1, 1, 'W',                                       9, 6)
    comboxBarrasLaterales = crearCBox(framePredimensionamiento, cboxBarrasLaterales, normalFont, 5, Ninguna, 1, 1, 'W', 10, 6)
    crearLabel(framePredimensionamiento, 'Barras centrales', boldFont, 1, 1, 'W',                                       9, 7)
    comboxBarrasCentrales = crearCBox(framePredimensionamiento, cboxBarrasCentrales, normalFont, 5, Ninguna, 1, 1, 'W', 10, 7)
    crearLabel(framePredimensionamiento, 'Estribos', boldFont, 1, 1, 'W',                                               9, 8)
    comboxEstribos = crearCBox(framePredimensionamiento, cboxEstribos, normalFont, 5, Ninguna, 1, 1, 'W',               10, 8)
    crearLabel(framePredimensionamiento, 'LOSAS', boldFont, 14, 1, 'N',                                                 0, 12)
    crearLabel(framePredimensionamiento, 'LOSA ALIGERADA EN UNA DIRECCION', boldFont, 3, 1, 'W',                        0, 13)
    crearLabel(framePredimensionamiento, 'Direccion', boldFont, 2, 1, 'W',                                              0, 14)
    comboxDireccionLosa = crearCBox(framePredimensionamiento, cboxDireccionLosa, normalFont, 5, funcionDireccion, 1, 1, 'W',     3, 14)
    crearLabel(framePredimensionamiento, 'Loseta espesor mínimo (C.8.13.5.2) (cm)', boldFont, 2, 1, 'W',                0, 15)
    crearLabelVariable(framePredimensionamiento, losetaEspesorMinimo, normalFont, 1, 'N',                               3, 15)
    crearLabel(framePredimensionamiento, 'Nervaduras ancho mínimo (C.8.13.5.2) (cm)', boldFont, 2, 1, 'W',              0, 16)
    crearLabelVariable(framePredimensionamiento, nervadurasAnchoMinimo, normalFont, 1, 'N',                             3, 16)
    crearLabel(framePredimensionamiento, 'Altura libre máxima nervadura (C.8.13.2) (cm)', boldFont, 2, 1, 'W',          0, 17)
    crearLabelVariable(framePredimensionamiento, alturaLibreMaximaNervadura, normalFont, 1, 'N',                        3, 17)
    crearLabel(framePredimensionamiento, 'Separación máxima nervadura (C.8.13.3) (cm)', boldFont, 2, 1, 'W',            0, 18)
    crearLabelVariable(framePredimensionamiento, separacionMaximaNervadura, normalFont, 1, 'N',                         3, 18)
    crearLabel(framePredimensionamiento, 'Nervios riostra (C.8.13.3.1) (m)', boldFont, 2, 1, 'W',                       0, 19)
    crearLabelVariable(framePredimensionamiento, nervioRiostra, normalFont, 1, 'N',                                     3, 19)
    crearLabel(framePredimensionamiento, 'NERVIO', boldFont, 1, 3, 'W',                                                 6, 13)
    crearLabel(framePredimensionamiento, 'bw', boldFont, 1, 1, 'W',                                                     7, 13)
    crearLabel(framePredimensionamiento, 'h', boldFont, 1, 1, 'W',                                                      8, 13)
    crearEntry(framePredimensionamiento, bwNervio, normalFont, 5, calculoLA, 1, 1, 'W',                                 7, 14)
    crearEntry(framePredimensionamiento, hNervio, normalFont, 5, calculoLA, 1, 1, 'W',                                  8, 14)
    crearLabelVariable(framePredimensionamiento, nervioPropuesto, boldFont, 2, 'N',                                     7, 15)
    canvasNervio = crearCanvas(framePredimensionamiento, 180, 180, 3, 8,                                                6, 16)
    crearLabel(framePredimensionamiento, 'LOSA MACIZA EN UNA DIRECCIÓN', boldFont, 2, 1, 'W',                           9, 13)
    crearLabel(framePredimensionamiento, 'L. Crítico', boldFont, 1, 1, 'W',                                             11, 13)
    crearLabel(framePredimensionamiento, 'm', boldFont, 1, 1, 'W',                                                      11, 14)
    crearLabel(framePredimensionamiento, 'C.9.5(a)', boldFont, 1, 1, 'W',                                               12, 13)
    crearLabel(framePredimensionamiento, 'cm', boldFont, 1, 1, 'W',                                                     12, 14)
    crearLabel(framePredimensionamiento, 'Simplemente apoyadas', boldFont, 1, 1, 'W',                                   9, 15)
    crearEntry(framePredimensionamiento, losaMacizaSimpleApoyo, normalFont, 10, calculoLMSimpleApoyo, 1, 1, 'W',        11, 15)
    crearLabelVariable(framePredimensionamiento, respuestaLMSimpleApoyo, normalFont, 1, 'W',                            12, 15)
    crearLabel(framePredimensionamiento, 'Con un extremo continuo', boldFont, 1, 1, 'W',                                9, 16)
    crearEntry(framePredimensionamiento, losaMacizaUnApoyoContinuo, normalFont, 10, calculoLMUnApoyoContinuo, 1, 1, 'W',            11, 16)
    crearLabelVariable(framePredimensionamiento, respuestaLMUnApoyoContinuo, normalFont, 1, 'W',                        12, 16)
    crearLabel(framePredimensionamiento, 'Ambos extremos continuos', boldFont, 1, 1, 'W',                               9, 17)
    crearEntry(framePredimensionamiento, losaMacizaAmbosApoyosContinuos, normalFont, 10, calculoLMAmbosApoyosContinuos, 1, 1, 'W',  11, 17)
    crearLabelVariable(framePredimensionamiento, respuestaLMAmbosApoyosContinuos, normalFont, 1, 'W',                   12, 17)
    crearLabel(framePredimensionamiento, 'En voladizo', boldFont, 1, 1, 'W',                                            9, 18)
    crearEntry(framePredimensionamiento, losaMacizaEnVoladizo, normalFont, 10, calculoLMEnVoladizo, 1, 1, 'W',                      11, 18)
    crearLabelVariable(framePredimensionamiento, respuestaLMEnVoladizo, normalFont, 1, 'W',                             12, 18)
    crearLabel(framePredimensionamiento, 'Altura h propuesta', boldFont, 3, 1, 'E',                                     9, 19)
    crearEntry(framePredimensionamiento, losaMacizaAlturaPropuesta, boldFont, 10, Ninguna, 1, 1, 'W',                   12, 19)


    ################################################## TERCER FRAME DEL TAB #################################################
    frameFHE = tk.Frame(tab, bg = '#FFFFFF')    
    tab.add(frameFHE, text = 'SOBRECARGAS Y ANALISIS SISMICO')
    crearLabel(frameFHE, 'SOBRECARGAS', boldFont, 2, 1, 'N',                                                            0, 0)
    crearLabel(frameFHE, 'SOBRECARGA DE ENTREPISO', boldFont, 1, 1, 'N',                                                0, 1)
    crearLabel(frameFHE, 'Particiones (B.3.4.3)', boldFont, 1, 1, 'W',                                                  0, 2)
    crearEntry(frameFHE, sobrecargaParticiones, normalFont, 10, totalSobrecargaEntrepiso, 1, 1, 'W',                    1, 2)
    crearLabel(frameFHE, 'Acabados (B.3.4.3)', boldFont, 1, 1, 'W',                                                     0, 3)
    crearEntry(frameFHE, sobrecargaAcabados, normalFont, 10, totalSobrecargaEntrepiso, 1, 1, 'W',                       1, 3)
    crearLabel(frameFHE, 'Cielo raso (B.3.4.3)', boldFont, 1, 1, 'W',                                                   0, 4)
    crearEntry(frameFHE, sobrecargaCieloRaso, normalFont, 10, totalSobrecargaEntrepiso, 1, 1, 'W',                      1, 4)
    crearLabel(frameFHE, 'Mortero de nivelación', boldFont, 1, 1, 'W',                                                  0, 5)
    crearEntry(frameFHE, sobrecargaMorteroNivelacion, normalFont, 10, totalSobrecargaEntrepiso, 1, 1, 'W',              1, 5)
    crearLabel(frameFHE, 'Instalaciones', boldFont, 1, 1, 'W',                                                          0, 6)
    crearEntry(frameFHE, sobrecargaInstalaciones, normalFont, 10, totalSobrecargaEntrepiso, 1, 1, 'W',                  1, 6)
    crearLabel(frameFHE, 'Total (Tonf/m2)', boldFont, 1, 1, 'E',                                                        0, 7)
    crearLabelVariable(frameFHE, sobrecargaEntrepiso, boldFont, 1,'W',                                                  1, 7)
    crearLabel(frameFHE, 'SOBRECARGA DE ESCALERA', boldFont, 1, 1, 'N',                                                 0, 9)
    crearLabel(frameFHE, 'Huella (cm)', boldFont, 1, 1, 'W',                                                            0, 10)
    crearEntry(frameFHE, huella, normalFont, 10, totalSobrecargaEscalera, 1, 1, 'W',                                    1, 10)
    crearLabel(frameFHE, 'Contrahuella (cm)', boldFont, 1, 1, 'W',                                                      0, 11)
    crearEntry(frameFHE, contrahuella, normalFont, 10, totalSobrecargaEscalera, 1, 1, 'W',                              1, 11)
    crearLabel(frameFHE, 'Peldaños', boldFont, 1, 1, 'W',                                                               0, 12)
    crearLabelVariable(frameFHE, sobrecargaPeldaños, normalFont, 1,'W',                                                 1, 12)
    crearLabel(frameFHE, 'Acabados peldaños', boldFont, 1, 1, 'W',                                                      0, 13)
    crearLabelVariable(frameFHE, sobrecargaAcabadoPeldaños, normalFont, 1,'W',                                          1, 13)
    crearLabel(frameFHE, 'Pañete losa', boldFont, 1, 1, 'W',                                                            0, 14)
    crearLabelVariable(frameFHE, sobrecargaPañeteLosa, normalFont, 1,'W',                                               1, 14)
    crearLabel(frameFHE, 'Total (Tonf/m2)', boldFont, 1, 1, 'E',                                                        0, 15)
    crearLabelVariable(frameFHE, sobrecargaEscalera, boldFont, 1,'W',                                                   1, 15)
    crearLabel(frameFHE, 'CARGAS VIVAS (Tonf/m2)', boldFont, 2, 1, 'N',                                                 0, 17)
    crearLabelVariable(frameFHE, cargaVivaN1, normalFont, 1,'W',                                                        0, 18)
    crearLabelVariable(frameFHE, entryCargaVivaN1, normalFont, 1, 'W',                                                  1, 18)
    crearLabelVariable(frameFHE, cargaVivaN2, normalFont, 1,'W',                                                        0, 19)
    crearLabelVariable(frameFHE, entryCargaVivaN2, normalFont, 1, 'W',                                                  1, 19)
    crearLabelVariable(frameFHE, cargaVivaN3, normalFont, 1,'W',                                                        0, 20)
    crearLabelVariable(frameFHE, entryCargaVivaN3, normalFont, 1, 'W',                                                  1, 20)
    crearLabelVariable(frameFHE, cargaVivaN4, normalFont, 1,'W',                                                        0, 21)
    crearLabelVariable(frameFHE, entryCargaVivaN4, normalFont, 1, 'W',                                                  1, 21)
    crearLabelVariable(frameFHE, cargaVivaN5, normalFont, 1,'W',                                                        0, 22)
    crearLabelVariable(frameFHE, entryCargaVivaN5, normalFont, 1, 'W',                                                  1, 22)
    crearLabelVariable(frameFHE, cargaVivaN6, normalFont, 1,'W',                                                        0, 23)
    crearLabelVariable(frameFHE, entryCargaVivaN6, normalFont, 1, 'W',                                                  1, 23)
    crearLabel(frameFHE, 'JUSTIFICACION MORTERO DE NIVELACION', boldFont, 3, 1, 'N',                                    0, 25)
    crearLabel(frameFHE, 'Espesor del mortero', boldFont, 1, 1, 'W',                                                    0, 26)
    crearEntry(frameFHE, espesorMortero, normalFont, 10, calculoSobrecargaMortero, 1, 1, 'W',                           1, 26)
    crearLabel(frameFHE, 'cm', normalFont, 1, 1, 'W',                                                                   2, 26)
    crearLabel(frameFHE, 'Sobrecarga mortero', boldFont, 1, 1, 'W',                                                     0, 27)
    crearLabelVariable(frameFHE, sobrecargaMortero, boldFont, 1, 'W',                                                   1, 27)
    crearLabel(frameFHE, 'Tonf/m2', boldFont, 1, 1, 'W',                                                                2, 27)
    ##############################SEGUNDA PAGINA
    crearLabel(frameFHE, 'JUSTIFICACION PARTICIONES', boldFont, 3, 1, 'N',                                              3, 0)
    crearLabel(frameFHE, 'Longitud total de los muros', boldFont, 1, 1, 'W',                                            3, 1)
    crearEntry(frameFHE, longitudTotalMuros, normalFont, 10, calculoPesoMuro, 1, 1, 'W',                                4, 1)
    crearLabel(frameFHE, 'm', normalFont, 1, 1, 'W',                                                                    5, 1)
    crearLabel(frameFHE, 'Altura muros', boldFont, 1, 1, 'W',                                                           3, 2)
    crearEntry(frameFHE, alturaMuros, normalFont, 10, calculoPesoMuro, 1, 1, 'W',                                       4, 2)
    crearLabel(frameFHE, 'm', normalFont, 1, 1, 'W',                                                                    5, 2)
    crearLabel(frameFHE, 'espesor del muro', boldFont, 1, 1, 'W',                                                       3, 3)
    crearEntry(frameFHE, espesorMuros, normalFont, 10, calculoPesoMuro, 1, 1, 'W',                                      4, 3)
    crearLabel(frameFHE, 'cm', normalFont, 1, 1, 'W',                                                                   5, 3)
    crearLabel(frameFHE, 'Volumen de los muros', boldFont, 1, 1, 'W',                                                   3, 4)
    crearLabelVariable(frameFHE, volumenMuros, boldFont, 1, 'W',                                                        4, 4)
    crearLabel(frameFHE, 'm3', boldFont, 1, 1, 'W',                                                                     5, 4)
    crearLabel(frameFHE, 'Peso muros', boldFont, 1, 1, 'W',                                                             3, 5)
    crearLabelVariable(frameFHE, pesoMuros, boldFont, 1, 'W',                                                           4, 5)
    crearLabel(frameFHE, 'Tonf', boldFont, 1, 1, 'W',                                                                   5, 5)
    crearLabel(frameFHE, 'Área total losa', boldFont, 1, 1, 'W',                                                        3, 6)
    crearEntry(frameFHE, areaTotalLosa, normalFont, 10, calculoSobrecargaParticiones, 1, 1, 'W',                        4, 6)
    crearLabel(frameFHE, 'm2', normalFont, 1, 1, 'W',                                                                   5, 6)
    crearLabel(frameFHE, 'Sobrecarga de particiones', boldFont, 1, 1, 'W',                                              3, 7)
    crearLabelVariable(frameFHE, sobrecargaParticionesCalculadas, boldFont, 1, 'W',                                     4, 7)
    crearLabel(frameFHE, 'Tonf/m2', boldFont, 1, 1, 'W',                                                                5, 7)
    crearLabel(frameFHE, 'FUERZA HORIZONTAL EQUIVALENTE', boldFont, 4, 1, 'N',                                          3, 8)
    crearLabel(frameFHE, 'Dirección', boldFont, 1, 1, 'W',                                                              3, 9)
    comboxDireccionSismo = crearCBox(frameFHE, cboxDireccionSismo, normalFont, 5, funcionDireccionSismo, 1, 1, 'W',     4, 9)
    crearLabel(frameFHE, 'Tabla A.4.2-1', boldFont, 1, 1, 'W',                                                          3, 10)
    crearLabel(frameFHE, 'Ct', normalFont, 1, 1, 'E',                                                                   3, 11)
    crearEntry(frameFHE, variable_Ct, normalFont, 10, funcionDireccionSismo, 1, 1, 'W',                                 4, 11)
    crearLabel(frameFHE, 'a', normalFont, 1, 1, 'E',                                                                    5, 11)
    crearEntry(frameFHE, variable_a, normalFont, 10, funcionDireccionSismo, 1, 1, 'W',                                  6, 11)
    crearLabel(frameFHE, 'Periodo fundamental del edificio (A.4.2-1): T <= Cu*Ta', boldFont, 3, 1, 'W',                 3, 12)
    crearLabel(frameFHE, 'Coeficiente de cálculo del período máximo (A.4.2-2)', boldFont, 3, 1, 'W',                    3, 13)
    crearLabel(frameFHE, 'Cu', normalFont, 1, 1, 'E',                                                                   3, 14)
    crearLabelVariable(frameFHE, variable_Cu, normalFont, 1, 'W',                                                       4, 14)
    crearLabel(frameFHE, 'Periodo aproximado (A.4.2-3 y A.4.2-5)', boldFont, 3, 1, 'W',                                 3, 15)
    crearLabel(frameFHE, 'Ta', normalFont, 1, 1, 'E',                                                                   3, 16)
    crearLabelVariable(frameFHE, variable_Ta, normalFont, 1, 'W',                                                       4, 16)
    crearLabel(frameFHE, 'Tmax', boldFont, 1, 1, 'E',                                                                   5, 17)
    crearLabelVariable(frameFHE, variable_Tmax, normalFont, 1, 'W',                                                     6, 17)
    crearLabel(frameFHE, 'T0 (A.2.6-6)', boldFont, 1, 1, 'W',                                                           3, 18)
    crearLabelVariable(frameFHE, variable_T0, normalFont, 1, 'W',                                                       4, 18)
    crearLabel(frameFHE, 'TC (A.2.6-2)', boldFont, 1, 1, 'W',                                                           3, 19)
    crearLabelVariable(frameFHE, variable_TC, normalFont, 1, 'W',                                                       4, 19)
    crearLabel(frameFHE, 'TL (A.2.6-4)', boldFont, 1, 1, 'W',                                                           3, 20)
    crearLabelVariable(frameFHE, variable_TL, normalFont, 1, 'W',                                                       4, 20)
    crearLabel(frameFHE, 'Recomendacion FEMA', boldFont, 1, 1, 'W',                                                     3, 21)
    crearLabelVariable(frameFHE, varRecomendacionFEMA, boldFont, 1, 'W',                                                4, 21)
    crearLabel(frameFHE, 'Telefinito', boldFont, 1, 1, 'E',                                                             5, 21)
    crearEntry(frameFHE, varPeriodoFundamentalElementosFinitos, normalFont, 10, funcionRecomendacionFEMA, 1, 1, 'W',    6, 21)
    crearLabel(frameFHE, 'Periodo elegido', boldFont, 1, 1, 'W',                                                        3, 22)
    crearEntry(frameFHE, varPeriodoElegido, normalFont, 10, funcionEspectroAceleracion, 1, 1, 'W',                      4, 22)
    crearLabel(frameFHE, 'Condiciones del espectro sismico', boldFont, 1, 1, 'W',                                       3, 23)
    crearLabelVariable(frameFHE, varCondicionesEspectro, normalFont, 2, 'W',                                            4, 23)
    crearLabel(frameFHE, 'Espectro de aceleracion (A.2.6.1)', boldFont, 1, 1, 'W',                                      3, 24)
    crearLabelVariable(frameFHE, varSa, normalFont, 1, 'E',                                                             4, 24)
    crearLabel(frameFHE, 'g', normalFont, 1, 1, 'W',                                                                    5, 24)
    crearButton(frameFHE, 'Gráfico espectro', funcionGraficoEspectro, 12, 'N',                                          3, 25)
    crearButton(frameFHE, 'Añadir Masas', Ninguna, 12, 'N',                                                             5, 25)
    crearLabel(frameFHE, 'Masa total', boldFont, 1, 1, 'E',                                                             3, 26)
    crearLabelVariable(frameFHE, varMasaTotal, normalFont, 1, 'W',                                                      4, 26)
    crearLabel(frameFHE, 'Tonf', normalFont, 1, 1, 'W',                                                                 5, 26)
    crearButton(frameFHE, 'Cortante vasal', Ninguna, 12, 'E',                                                           3, 27)
    crearLabelVariable(frameFHE, varCortanteVasal, boldFont, 1, 'W',                                                    4, 27)
    crearLabel(frameFHE, 'Tonf', normalFont, 1, 1, 'W',                                                                 5, 27)
    crearLabel(frameFHE, 'K', boldFont, 1, 1, 'E',                                                                      3, 28)
    crearEntry(frameFHE, varK, normalFont, 10, Ninguna, 1, 1, 'W',                                                      4, 28)
    crearButton(frameFHE, 'Ayuda con K', Ninguna, 12, 'E',                                                              5, 28)


    


    




    ################################################## CUARTO FRAME DEL TAB #################################################
    frameCalculoNervio = tk.Frame(tab, bg = '#FFFFFF')    
    tab.add(frameCalculoNervio, text = 'DISEÑO NERVIO')
    tabCalculoNervio = ttk.Notebook(frameCalculoNervio)
    tabCalculoNervio.grid(column = 0, row = 0)
    frameDiseño = tk.Frame(tabCalculoNervio, bg = '#FFFFFF')    
    tabCalculoNervio.add(frameDiseño, text = 'ANALISIS')
    frameNervioParte2 = tk.Frame(tabCalculoNervio, bg = '#FFFFFF')
    tabCalculoNervio.add(frameNervioParte2, text = 'DISEÑO')
    crearLabel(frameDiseño, 'ANALISIS NERVIO', boldFont, 3, 1, 'N',                                                     0, 0)
    crearLabel(frameDiseño,'Longitud', normalFont, 1, 1, 'W',                                                           0, 1)
    crearEntry(frameDiseño, entryLongitudNervio, normalFont, 10, Ninguna, 1, 1, 'W',                                    1, 1)
    crearLabel(frameDiseño, 'm', normalFont, 1, 1, 'W',                                                                 2, 1)
    crearLabel(frameDiseño,'Carga', normalFont, 1, 1, 'W',                                                              0, 2)
    crearEntry(frameDiseño, entryCargaNervio, normalFont, 10, Ninguna, 1, 1, 'W',                                       1, 2)
    crearLabel(frameDiseño, 'Tonf/m^2', normalFont, 1, 1, 'W',                                                          2, 2)
    crearLabel(frameDiseño,'Apoyo Inicial', normalFont, 2, 1, 'W',                                                      0, 3)
    comboxApoyoInicial = crearCBox(frameDiseño, cboxApoyoInicial, normalFont, 10, Ninguna, 1, 1, 'W',                   2, 3)
    crearLabel(frameDiseño,'Apoyo Final', normalFont, 2, 1, 'W',                                                        0, 4)
    comboxApoyoFinal = crearCBox(frameDiseño, cboxApoyoFinal, normalFont, 10, Ninguna, 1, 1, 'W',                       2, 4)
    crearLabelVariable(frameDiseño, conteoTramo, normalFont, 2, 'N',                                                    0, 5)
    crearButton(frameDiseño, 'Añadir Tramo', añadirTramoCalc, 12, 'N',                                                  2, 5)
    crearButton(frameDiseño, 'Idealizar Nervio', dibujarIdealizacionNervio, 20, 'N',                                    2, 6)
    crearButton(frameDiseño, 'Calcular Momentos', calcularMomentos, 20, 'N',                                            2, 7)
                                 #### TAB DENTRO DEL FRAME DISEÑO PARA VIGA, CORTANTE, MOMENTO ####
    tabDiseñoNervio = ttk.Notebook(frameDiseño)
    tabDiseñoNervio.grid(column = 4, row = 0, columnspan = 13, rowspan = 13)
    frameNervio = tk.Frame(tabDiseñoNervio, bg = '#FFFFFF')    
    tabDiseñoNervio.add(frameNervio, text = 'IDEALIZACION')
    canvasIdealizacion = crearCanvas(frameNervio, 1100, 240, 1, 1, 0, 0)
    frameCortante = tk.Frame(tabDiseñoNervio, bg = '#FFFFFF')    
    tabDiseñoNervio.add(frameCortante, text = 'CORTANTE')
    crearCanvas(frameCortante, 1100, 240, 1, 1, 0, 0)
    frameMomento = tk.Frame(tabDiseñoNervio, bg = '#FFFFFF')    
    tabDiseñoNervio.add(frameMomento, text = 'MOMENTO')
    crearCanvas(frameMomento, 1100, 240, 1, 1, 0, 0)
                                ################################################################
    crearLabel(frameDiseño, 'M1*L1+2*M2*(L1+L2)+M3*L2 = -6*a1-6*a2', boldFont, 4, 1, 'N',                               0, 13)
    crearLabel(frameDiseño, 'Mi=Mf = -(W*L^2)/2', boldFont, 2, 1, 'N',                                                  4, 13)
    crearLabel(frameDiseño, 'a1=a2 = (W*L^3)/24', boldFont, 2, 1, 'N',                                                  6, 13)
    crearLabel(frameDiseño, 'SECCION 1', boldFont, 4, 1, 'N',                                                           0, 14)
    crearLabel(frameDiseño, 'M1 = ', normalFont, 1, 1, 'E',                                                             0, 15)
    crearLabelVariable(frameDiseño, momentoInicialSeccion1, normalFont, 2, 'W',                                         1, 15)
    crearLabel(frameDiseño, 'L1 = ', normalFont, 1, 1, 'E',                                                             0, 16)
    crearLabelVariable(frameDiseño, longitud1Seccion1, normalFont, 2, 'W',                                              1, 16)
    crearLabel(frameDiseño, 'L2 = ', normalFont, 1, 1, 'E',                                                             0, 17)
    crearLabelVariable(frameDiseño, longitud2Seccion1, normalFont, 2, 'W',                                              1, 17)
    crearLabel(frameDiseño, 'M3 = ', normalFont, 1, 1, 'E',                                                             0, 18)
    crearLabelVariable(frameDiseño, momentoFinalSeccion1, normalFont, 2, 'W',                                           1, 18)
    crearLabel(frameDiseño, 'x1 = ', normalFont, 1, 1, 'E',                                                             0, 19)
    crearLabelVariable(frameDiseño, x1Seccion1, normalFont, 2, 'W',                                                     1, 19)
    crearLabel(frameDiseño, 'x2 = ', normalFont, 1, 1, 'E',                                                             0, 20)
    crearLabelVariable(frameDiseño, x2Seccion1, normalFont, 2, 'W',                                                     1, 20)
    crearLabel(frameDiseño, 'M2 = ', boldFont, 1, 1, 'E',                                                               0, 21)
    crearLabelVariable(frameDiseño, resultadoSeccion1, normalFont, 2, 'W',                                              1, 21)
    crearLabel(frameDiseño, 'SECCION 2', boldFont, 2, 1, 'N',                                                           4, 14)
    crearLabel(frameDiseño, 'M1 = ', normalFont, 1, 1, 'E',                                                             4, 15)
    crearLabelVariable(frameDiseño, momentoInicialSeccion2, normalFont, 1, 'W',                                         5, 15)
    crearLabel(frameDiseño, 'L1 = ', normalFont, 1, 1, 'E',                                                             4, 16)
    crearLabelVariable(frameDiseño, longitud1Seccion2, normalFont, 1, 'W',                                              5, 16)
    crearLabel(frameDiseño, 'L2 = ', normalFont, 1, 1, 'E',                                                             4, 17)
    crearLabelVariable(frameDiseño, longitud2Seccion2, normalFont, 1, 'W',                                              5, 17)
    crearLabel(frameDiseño, 'M3 = ', normalFont, 1, 1, 'E',                                                             4, 18)
    crearLabelVariable(frameDiseño, momentoFinalSeccion2, normalFont, 1, 'W',                                           5, 18)
    crearLabel(frameDiseño, 'x1 = ', normalFont, 1, 1, 'E',                                                             4, 19)
    crearLabelVariable(frameDiseño, x1Seccion2, normalFont, 1, 'W',                                                     5, 19)
    crearLabel(frameDiseño, 'x2 = ', normalFont, 1, 1, 'E',                                                             4, 20)
    crearLabelVariable(frameDiseño, x2Seccion2, normalFont, 1, 'W',                                                     5, 20)
    crearLabel(frameDiseño, 'M2 = ', boldFont, 1, 1, 'E',                                                               4, 21)
    crearLabel(frameDiseño, 'SECCION 3', boldFont, 2, 1, 'N',                                                           6, 14)
    crearLabel(frameDiseño, 'M1 = ', normalFont, 1, 1, 'E',                                                             6, 15)
    crearLabelVariable(frameDiseño, momentoInicialSeccion3, normalFont, 1, 'W',                                         7, 15)
    crearLabel(frameDiseño, 'L1 = ', normalFont, 1, 1, 'E',                                                             6, 16)
    crearLabelVariable(frameDiseño, longitud1Seccion3, normalFont, 1, 'W',                                              7, 16)
    crearLabel(frameDiseño, 'L2 = ', normalFont, 1, 1, 'E',                                                             6, 17)
    crearLabelVariable(frameDiseño, longitud2Seccion3, normalFont, 1, 'W',                                              7, 17)
    crearLabel(frameDiseño, 'M3 = ', normalFont, 1, 1, 'E',                                                             6, 18)
    crearLabelVariable(frameDiseño, momentoFinalSeccion3, normalFont, 1, 'W',                                           7, 18)
    crearLabel(frameDiseño, 'x1 = ', normalFont, 1, 1, 'E',                                                             6, 19)
    crearLabelVariable(frameDiseño, x1Seccion3, normalFont, 1, 'W',                                                     7, 19)
    crearLabel(frameDiseño, 'x2 = ', normalFont, 1, 1, 'E',                                                             6, 20)
    crearLabelVariable(frameDiseño, x2Seccion3, normalFont, 1, 'W',                                                     7, 20)
    crearLabel(frameDiseño, 'M2 = ', boldFont, 1, 1, 'E',                                                               6, 21)
    crearLabel(frameDiseño, 'SECCION 4', boldFont, 2, 1, 'N',                                                           8, 14)
    crearLabel(frameDiseño, 'M1 = ', normalFont, 1, 1, 'E',                                                             8, 15)
    crearLabelVariable(frameDiseño, momentoInicialSeccion4, normalFont, 1, 'W',                                         9, 15)
    crearLabel(frameDiseño, 'L1 = ', normalFont, 1, 1, 'E',                                                             8, 16)
    crearLabelVariable(frameDiseño, longitud1Seccion4, normalFont, 1, 'W',                                              9, 16)
    crearLabel(frameDiseño, 'L2 = ', normalFont, 1, 1, 'E',                                                             8, 17)
    crearLabelVariable(frameDiseño, longitud2Seccion4, normalFont, 1, 'W',                                              9, 17)
    crearLabel(frameDiseño, 'M3 = ', normalFont, 1, 1, 'E',                                                             8, 18)
    crearLabelVariable(frameDiseño, momentoFinalSeccion4, normalFont, 1, 'W',                                           9, 18)
    crearLabel(frameDiseño, 'x1 = ', normalFont, 1, 1, 'E',                                                             8, 19)
    crearLabelVariable(frameDiseño, x1Seccion4, normalFont, 1, 'W',                                                     9, 19)
    crearLabel(frameDiseño, 'x2 = ', normalFont, 1, 1, 'E',                                                             8, 20)
    crearLabelVariable(frameDiseño, x2Seccion4, normalFont, 1, 'W',                                                     9, 20)
    crearLabel(frameDiseño, 'M2 = ', boldFont, 1, 1, 'E',                                                               8, 21)
    crearLabelVariable(frameDiseño, resultadoSeccion2, normalFont, 1, 'W',                                              5, 21)
    crearLabel(frameDiseño, 'Ecuacion 1 = ', normalFont, 2, 1, 'E',                                                     0, 22)
    crearEntry(frameDiseño, entryEcuacion1, normalFont, 20, Ninguna, 2, 1, 'W',                                         2, 22)
    crearLabel(frameDiseño, 'Ecuacion 2 = ', normalFont, 2, 1, 'E',                                                     0, 23)
    crearEntry(frameDiseño, entryEcuacion2, normalFont, 20, Ninguna, 2, 1, 'W',                                         2, 23)
    crearLabel(frameDiseño, 'Ecuacion 3 = ', normalFont, 2, 1, 'E',                                                     0, 24)
    crearEntry(frameDiseño, entryEcuacion3, normalFont, 20, Ninguna, 2, 1, 'W',                                         2, 24)
    crearLabel(frameDiseño, 'Ecuacion 4 = ', normalFont, 2, 1, 'E',                                                     0, 25)
    crearEntry(frameDiseño, entryEcuacion4, normalFont, 20, Ninguna, 2, 1, 'W',                                         2, 25)
    crearButton(frameDiseño, 'Calcular Reacciones', calcularReacciones, 20, 'W',                                        2, 26)
    crearLabel(frameDiseño, 'NOTA: Las ecuaciones deben ir en funcion de los apoyos (a, b, c, d, e, f).', normalFont, 5, 1, 'W',    0, 27)
    crearLabel(frameDiseño, 'Las ecuaciones deben estar igualadas a 0.', normalFont, 5, 1, 'W',                                     0, 28)
    crearLabel(frameDiseño, 'Ejemplo: (1) -0.28*Mc-2.79-Mb; (2) -0.28*Mb-2.79-Mc.', normalFont, 8, 1, 'W',                          0, 29)
    crearLabel(frameDiseño, 'Mb = ', boldFont, 1, 1, 'E',                                                               4, 22)
    crearLabelVariable(frameDiseño, momentoB, boldFont, 1, 'W',                                                         5, 22)
    crearLabel(frameDiseño, 'Mc = ', boldFont, 1, 1, 'E',                                                               4, 23)
    crearLabelVariable(frameDiseño, momentoC, boldFont, 1, 'W',                                                         5, 23)
    crearLabel(frameDiseño, 'Md = ', boldFont, 1, 1, 'E',                                                               4, 24)
    crearLabelVariable(frameDiseño, momentoD, boldFont, 1, 'W',                                                         5, 24)
    crearLabel(frameDiseño, 'Me = ', boldFont, 1, 1, 'E',                                                               4, 25)
    crearLabelVariable(frameDiseño, momentoE, boldFont, 1, 'W',                                                         5, 25)
    crearLabel(frameDiseño, 'ZMa = M1-W*L^2/2+M2+R2*L', boldFont, 3, 1, 'N',                                            6, 22)
    crearLabel(frameDiseño, 'ZFv =R1-W*L+R2', boldFont, 3, 1, 'N',                                                      6, 23)
    crearLabel(frameDiseño, 'ZFvoladizo = R1-W*L', boldFont, 3, 1, 'N',                                                 6, 24)
    crearLabel(frameDiseño, 'Rvi = ', boldFont, 1, 1, 'E',                                                              6, 25)
    crearLabelVariable(frameDiseño, reaccionVoladizoInicial, normalFont, 1, 'W',                                        7, 25)
    crearLabel(frameDiseño, 'R1 = ', boldFont, 1, 1, 'E',                                                               6, 26)
    crearLabelVariable(frameDiseño, reaccion1, normalFont, 1, 'W',                                                      7, 26)
    crearLabel(frameDiseño, 'R2_1 = ', boldFont, 1, 1, 'E',                                                             6, 27)
    crearLabelVariable(frameDiseño, reaccion2_1, normalFont, 1, 'W',                                                    7, 27)
    crearLabel(frameDiseño, 'R2_2 = ', boldFont, 1, 1, 'E',                                                             6, 28)
    crearLabelVariable(frameDiseño, reaccion2_2, normalFont, 1, 'W',                                                    7, 28)
    crearLabel(frameDiseño, 'R3_1 = ', boldFont, 1, 1, 'E',                                                             9, 22)
    crearLabelVariable(frameDiseño, reaccion3_1, normalFont, 1, 'W',                                                    10, 22)
    crearLabel(frameDiseño, 'R3_2 = ', boldFont, 1, 1, 'E',                                                             9, 23)
    crearLabelVariable(frameDiseño, reaccion3_2, normalFont, 1, 'W',                                                    10, 23)
    crearLabel(frameDiseño, 'R4_1 = ', boldFont, 1, 1, 'E',                                                             9, 24)
    crearLabelVariable(frameDiseño, reaccion4_1, normalFont, 1, 'W',                                                    10, 24)
    crearLabel(frameDiseño, 'R4_2 = ', boldFont, 1, 1, 'E',                                                             9, 25)
    crearLabelVariable(frameDiseño, reaccion4_2, normalFont, 1, 'W',                                                    10, 25)
    crearLabel(frameDiseño, 'R5_1 = ', boldFont, 1, 1, 'E',                                                             9, 26)
    crearLabelVariable(frameDiseño, reaccion5_1, normalFont, 1, 'W',                                                    10, 26)
    crearLabel(frameDiseño, 'R5_2 = ', boldFont, 1, 1, 'E',                                                             9, 27)
    crearLabelVariable(frameDiseño, reaccion5_2, normalFont, 1, 'W',                                                    10, 27)
    crearLabel(frameDiseño, 'R6 = ', boldFont, 1, 1, 'E',                                                               9, 28)
    crearLabelVariable(frameDiseño, reaccion6, normalFont, 1, 'W',                                                      10, 28)
    crearLabel(frameDiseño, 'Rvf = ', boldFont, 1, 1, 'E',                                                              9, 29)
    crearLabelVariable(frameDiseño, reaccionVoladizoFinal, normalFont, 1, 'W',                                          10, 29)
    #########################################FRAME NERVIO PARTE 2
    crearLabel(frameNervioParte2, 'REACCIONES', boldFont, 2, 1, 'W',                                                    0, 0)
    crearLabel(frameNervioParte2, 'R1 = ', boldFont, 1, 1, 'W',                                                         0, 1)
    crearLabelVariable(frameNervioParte2, R1_total, normalFont, 1, 'W',                                                 1, 1)
    crearLabel(frameNervioParte2, 'R2 = ', boldFont, 1, 1, 'W',                                                         0, 2)
    crearLabelVariable(frameNervioParte2, R2_total, normalFont, 1, 'W',                                                 1, 2)
    crearLabel(frameNervioParte2, 'R3 = ', boldFont, 1, 1, 'W',                                                         0, 3)
    crearLabelVariable(frameNervioParte2, R3_total, normalFont, 1, 'W',                                                 1, 3)
    crearLabel(frameNervioParte2, 'R4 = ', boldFont, 1, 1, 'W',                                                         0, 4)
    crearLabelVariable(frameNervioParte2, R4_total, normalFont, 1, 'W',                                                 1, 4)
    crearLabel(frameNervioParte2, 'R5 = ', boldFont, 1, 1, 'W',                                                         0, 5)
    crearLabelVariable(frameNervioParte2, R5_total, normalFont, 1, 'W',                                                 1, 5)
    crearLabel(frameNervioParte2, 'R6 = ', boldFont, 1, 1, 'W',                                                         0, 6)
    crearLabelVariable(frameNervioParte2, R6_total, normalFont, 1, 'W',                                                 1, 6)

    
    ##################################### SET VARIABLES INICIALES DE ENTRADAS Y LABELS ######################################
    entryProyecto.set('')
    entryDireccion.set('')
    entryPropietario.set('')
    entryRealizo.set('Ing. John J. Arroyo O.')
    entryReviso.set('')
    entryFecha.set('')
    comboxDepartamentos['values'] = list(Colombia.keys())
    comboxMunicipios['state'] = 'disabled'
    comboxGUso['values'] = ('IV - Edificaciones indispensables','III - Edificaciones de atención a la comunidad',
                            'II - Estructuras de ocupación especial','I - Estructuras de ocupación normal')
    entryPisos.set(3)
    entryAltura.set(3)
    entryAlturaTotal.set(9)
    comboxSEstructural['state'] = 'disabled' 
    comboxSEstructural['values'] = list(sistemaEstructural.keys())
    comboxSistemaRS['state'] = 'disabled'
    comboxSistemaRS2['state'] = 'disabled'
    comboxPerfilSuelo['state'] = 'disabled'
    comboxPerfilSuelo['values'] = ('A','B','C','D','E','F')
    entryIP.set(1)
    entryIA.set(1)
    entryAR.set(0.75)
    comboxFc['values'] = ('210', '245', '280')
    comboxMConcreto['values'] = list(concretoEc.keys())
    entryMC['state'] = 'disabled'
    entryWc.set(2400)
    comboxOConcreto['state'] = 'disabled'
    Ecas.set(int(420*10.1972))
    recubrimientoViga.set(4)
    recubrimientoColumna.set(4)
    comboxCantidadBarras['values'] = ('4', '8')
    comboxBarrasLaterales['values'] = ('#4', '#5', '#6', '#7', '#8')
    comboxBarrasLaterales['state'] = 'disabled'
    comboxBarrasCentrales['values'] = ('#4', '#5', '#6', '#7', '#8')
    comboxBarrasCentrales['state'] = 'disabled'
    comboxEstribos['values'] = ('#2', '#3', '#4', '#5', '#6')
    comboxApoyoInicial['values'] = ('Ninguno', 'Articulado')
    comboxApoyoFinal['values'] = ('Ninguno', 'Articulado')
    conteoTramo.set(0)
    entryLongitudNervio.set('1.5')
    entryCargaNervio.set('1.86')
    comboxDireccionLosa['values'] = ('X', 'Y')
    comboxDireccionSismo['values'] = ('X', 'Y')
    sobrecargaParticiones.set(0.3)
    sobrecargaAcabados.set(0.16)
    sobrecargaCieloRaso.set(0.03)
    sobrecargaMorteroNivelacion.set(0.1)
    sobrecargaInstalaciones.set(0.06)
    huella.set(30)
    contrahuella.set(18)

    #Se debe programar
    cargaVivaN1.set('Carga viva: Uso residencial (B.4.2.1)')
    entryCargaVivaN1.set(0.18)
    cargaVivaN2.set('Carga viva: Balcones (B.4.2.1)')
    entryCargaVivaN2.set(0.5)
    cargaVivaN3.set('Carga viva: Escalera (B.4.2.1)')
    entryCargaVivaN3.set(0.3)
    #Hasta aqui se debe programar

    espesorMortero.set(4)
    longitudTotalMuros.set(160)
    alturaMuros.set(2.8)
    espesorMuros.set(10)
    areaTotalLosa.set(190)

    #Se debe programar
    variable_Ct.set(0.047)
    variable_a.set(0.9)
    #Hasta aqui se debe programar
    
    

    
    while True:
        root.mainloop()

if __name__ == '__main__':
    main()